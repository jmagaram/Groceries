@using Models
@using static Models.CoreTypes
@implements IDisposable

<ElixDrawer Closed="OnClose" @ref="_drawer">
    @if (_model == null) {
        return;
    }
    <div class="buttonDrawer">
        <div class="threeColumnHeader">
            <div></div>
            <h1>Stores</h1>
            <button class="drawerButton" ontouchstart="" @onclick="async _ => await Close()">Done</button>
        </div>
        @foreach (var i in _model.SelectionSummary.OrderBy(i => i.Item.StoreName)) {
            string selectedClass = i.IsSelected ? "selected" : "";
            <button class="drawerButton @selectedClass" ontouchstart="" @onclick="_=>_model = _model.Toggle(i.Item)">
                <div style="display:flex; flex-direction:row; justify-content:space-between">
                    <div>@i.Item.StoreName.AsText()</div>
                    @if (i.IsSelected) {
                        <ion-icon name="checkmark-outline"></ion-icon>
                    }
                    else {
                        <div>&nbsp;</div>
                    }
                </div>
            </button>
        }
        <button class="drawerButton" ontouchstart="" @onclick="_=>_model = _model.SelectAll()">
            <div style="display:flex; flex-direction:row; justify-content:space-between">
                <span>All Stores</span>
                @if (_model.AllSelected) {
                    <ion-icon name="checkmark-outline"></ion-icon>
                }
                else {
                    <div>&nbsp;</div>
                }
            </div>
        </button>
        <button class="drawerButton" ontouchstart="" @onclick="async _ => await Cancel()">
            <div style="display:flex; flex-direction:row; justify-content:space-between">
                <span>Cancel</span>
                <div>&nbsp;</div>
            </div>
        </button>
    </div>
</ElixDrawer>

@code {
    ElixDrawer _drawer;
    SelectMany<Store> _model;

    public void Dispose() => _drawer?.Dispose();

    [Parameter]
    public EventCallback<SelectMany<Store>> Closed { get; set; }

    private async ValueTask Cancel() {
        _model = _model.RevertToOriginalSelection();
        await Closed.InvokeAsync(_model);
        await _drawer.Close();
        _model = null;
    }

    public async ValueTask Open(SelectMany<Store> model) {
        _model = model;
        await _drawer.Open();
    }

    public async ValueTask Close() {
        await _drawer.Close(); // Can't could on event being raised
        if (_model != null) {
            await Closed.InvokeAsync(_model);
            _model = null;
        }
    }

    private async Task OnClose() {
        if (_model != null) {
            await Closed.InvokeAsync(_model);
            _model = null;
        }
    }
}
