@implements IDisposable
@using Models
@using static Models.CoreTypes
@using static Models.SelectZeroOrOneModule
@using Common

<ElixDrawer @ref="_drawer">
    <div class="buttonDrawer">
        <button ontouchstart="" class="drawerButton" @onclick="async _ => await HideUpcoming()">Only items on shopping list <strong>now</strong></button>
        <button ontouchstart="" class="drawerButton" @onclick="async _ => await SelectUpcomingDays(5)">Show <strong>soon</strong></button>
        <button ontouchstart="" class="drawerButton" @onclick="async _ => await SelectUpcomingDays(365)">Show <strong>soon and later</strong></button>
    </div>
</ElixDrawer>

@code {
    private ElixDrawer _drawer;

    public void Dispose() => _drawer?.Dispose();

    public async ValueTask Open() {
        await _drawer.Open();
    }

    public async ValueTask Close() => await _drawer.Close();

    [Parameter]
    public EventCallback<int> OnSelectUpcomingDays { get; set; }

    [Parameter]
    public EventCallback<int> OnHideUpcoming { get; set; }

    private async Task SelectUpcomingDays(int c) {
        await _drawer.Close();
        await OnSelectUpcomingDays.InvokeAsync(c);
    }

    private async Task HideUpcoming() {
        await _drawer.Close();
        await OnHideUpcoming.InvokeAsync();
    }
}
