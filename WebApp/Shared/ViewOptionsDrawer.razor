@using Models
@using static Models.CoreTypes
@using static Models.SelectZeroOrOneModule
@using Common

<ElixDrawer @ref="_drawer">
    <div class="drawer">
        <header>
            <div></div>
            <h1>View</h1>
            <div></div>
        </header>
        <div class="buttonGroup">
            <button ontouchstart="" @onclick="async _ => await HideUpcoming()"><ion-icon name="cart-outline"></ion-icon>I'm shopping now!<br /><small class="text-muted">Only show items I still need to buy</small></button>
            <button ontouchstart="" @onclick="async _ => await SelectUpcomingDays(5)"><ion-icon name="calendar-outline"></ion-icon>Quickly edit my shopping list<br /><small class="text-muted">Choose from items you've bought before and items due soon</small></button>
            <button ontouchstart="" @onclick="async _ => await SelectUpcomingDays(365)"><ion-icon name="calendar-outline"></ion-icon>Review all home inventory<br /><small class="text-muted">See all future scheduled purchases and completed items</small></button>
        </div>
        <div class="buttonGroup">
            @if (_currentFontSize?.IsLargeFontSize == true)
            {
                <button style="border-top-color:black" ontouchstart="" class="drawerButton" @onclick="async _ => await OnToggleFontSize()"><ion-icon name="text-outline"></ion-icon>Smaller text</button>
            }
            else
            {
                <button ontouchstart="" class="drawerButton" @onclick="async _ => await OnToggleFontSize()"><ion-icon name="text-outline"></ion-icon>Bigger text</button>
            }
        </div>
    </div>
</ElixDrawer>

@code {
    private ElixDrawer _drawer;
    private FontSize _currentFontSize;

    public async ValueTask Open(FontSize currentFontSize)
    {
        _currentFontSize = currentFontSize;
        await _drawer.Open();
    }

    public async ValueTask Close() => await _drawer.Close();

    [Parameter]
    public EventCallback<int> OnSelectUpcomingDays { get; set; }

    [Parameter]
    public EventCallback<int> OnHideUpcoming { get; set; }

    [Parameter]
    public EventCallback<FontSize> ChooseFontSize { get; set; }

    private async Task OnToggleFontSize()
    {
        await _drawer.Close();
        await ChooseFontSize.InvokeAsync(_currentFontSize.IsLargeFontSize ? FontSize.NormalFontSize : FontSize.LargeFontSize);
    }

    private async Task SelectUpcomingDays(int c)
    {
        await _drawer.Close();
        await OnSelectUpcomingDays.InvokeAsync(c);
    }

    private async Task HideUpcoming()
    {
        await _drawer.Close();
        await OnHideUpcoming.InvokeAsync();
    }
}
