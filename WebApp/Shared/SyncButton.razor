@using static Models.ServiceTypes;
@using System.Reactive.Linq;

<style>
    ion-icon {
        font-size:24px;
    }
</style>
<Observable Context="i" Source="StateService.SyncronizationStatus">
    <Loading>
        <button class="btn text-light" type="button" disabled><ion-icon name="cloud-upload-outline"></ion-icon></button>
    </Loading>
    <Loaded>
        @if (i.IsSynchronizing) {
            <button class="btn text-light" style="@Style" type="button" disabled><div class="spinner-border text-light spinner-border-sm" role="status" /></button>
        }
        else {
            string color =
                i.IsHasChanges ? "btn-danger" :
                i.IsNoChanges ? "" :
                throw new NotImplementedException("Unexpected synchronization status; can't choose color for it.");
            <button class="btn text-light @color" style="@Style" type="button" disabled="@i.IsSynchronizing" @onclick:preventDefault @onclick="StateService.SyncIncrementalAsync"><ion-icon name="cloud-upload-outline"></ion-icon></button>
        }
    </Loaded>
</Observable>

@code {
    [Inject]
    public Models.Service StateService { get; set; }

    [Parameter]
    public string Style { get; set; }
}
