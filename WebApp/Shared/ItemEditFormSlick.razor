@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Models;
@using WebApp.Common;

@if (Form == null) {
    <span>Loading...</span>
    return;
}
<Modes ActiveIndex="@ActiveIndex">
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <div class="enterLeft">
                @if (Form.HasErrors()) {
                    <button class="btn btn-dark iconButton fadeIn" @onclick="OnCancel"><ion-icon name="arrow-undo-outline"></ion-icon></button>
                }
                else {
                    <button class="btn btn-dark iconButton fadeIn" @onclick="OnSaveChanges"><ion-icon name="chevron-back-outline"></ion-icon></button>
                }
            </div>
            <span class="navbar-text enterLeft">@(Form.ItemId.IsNone() ? "New" : "Edit")</span>
            <form class="form-inline enterLeft">
                <div role="group">
                    <button type="button" class="btn btn-dark iconButton" disabled="@Form.HasErrors()" @onclick="OnSaveChanges">Save</button>
                </div>
            </form>
        </nav>
        <div class="propertyGrid enterLeft" style="margin-top:1rem; font-size:larger">
            <div style="margin-top:0.5rem"><Checkbox IsChecked="@Form.IsComplete" IsCheckedChanged="_=>OnToggleComplete()" Title="" /></div>
            <div>
                @{
                    bool isHardComplete = Form.ScheduleKind.IsCompleted;
                    string c = (isHardComplete ? "hardComplete" : "");
                }
                <input class="@c" type="text" placeholder="Item to buy" @oninput="OnItemNameChange" @onfocusout="OnItemNameFocusOut" value="@Form.ItemName.ValueCommitted" />
                @if (Form.ItemNameValidation().IsError) {
                    <div class="errorMessage">@Form.ItemNameValidation().ErrorValue</div>
                }
            </div>
        </div>
        <div class="propertyGrid enterLeft">
            <div><ion-icon name="bar-chart-outline"></ion-icon></div>
            <div>
                <input type="text" placeholder="Quantity (optional)" @oninput="e=>OnQuantityChange((string)e.Value)" @onfocusout="OnQuantityFocusOut" value="@Form.Quantity.ValueCommitted" />
                @if (Form.QuantityValidation().IsError) {
                    <div class="errorMessage text-danger">@Form.QuantityValidation().ErrorValue</div>
                }
            </div>
        </div>
        @{
            bool hasCategory = !string.IsNullOrWhiteSpace(Form.CategoryCommittedName());
            bool hasRepeat = Form.ScheduleKind.IsRepeat;
            bool hasPostpone = Form.Postpone.IsSome();
            bool hasStores = Form.Stores.Any(i => !i.IsSold);
            bool hasNote = Form.Note.ValueCommitted.Length > 0;

            string hasCategoryClass = !hasCategory ? "text-secondary" : "";
            string hasRepeatClass = !hasRepeat ? "text-secondary" : "";
            string hasPostponeClass = !hasPostpone ? "text-secondary" : "";
            string hasStoresClass = !hasStores ? "text-secondary" : "";
            string hasNoteClass = !hasNote ? "text-secondary" : "";
        }
        <div class="propertyGrid enterLeft divButton @hasCategoryClass" @onclick="async _=> await OnClickCategory()">
            <ion-icon name="color-palette"></ion-icon>
            <div>@(hasCategory ? Form.CategoryCommittedName() : "Category...")</div>
        </div>
        <div class="propertyGrid enterLeft divButton @hasRepeatClass" @onclick="async _=>await OnClickFrequency()">
            <ion-icon name="repeat-outline"></ion-icon>
            <div>@(hasRepeat ? Models.ItemFormModule.frequencyAsText(Form.Frequency) : "Repeat...")</div>
        </div>
        @if (Form.ScheduleKind.IsRepeat) {
            string animateClass = HighlightPostpone ? "bounce-top" : "";
            HighlightPostpone = false;
            <div class="propertyGrid enterLeft divButton" @onclick="async _=>await OnClickPostpone()">
                <div class="@animateClass @hasPostponeClass"><ion-icon name="calendar-outline"></ion-icon></div>
                <div class="@animateClass @hasPostponeClass">@(hasPostpone ? $"{@ItemFormModule.postponeDurationAsText(Form.Postpone.Value)} from now" : "Postpone...")</div>
            </div>
        }
        @if (Form.Stores.Any()) {
            <div class="propertyGrid enterLeft divButton @hasStoresClass" @onclick="async _ => await OnClickStores()">
                <ion-icon name="storefront-outline"></ion-icon>
                @if (Form.Stores.All(i => i.IsSold)) {
                    <div>All stores</div>
                }
                else {
                    <ul style="list-style-type:none; padding-left:0px;margin:0px;">
                        @foreach (var s in Form.Stores.Where(i => !i.IsSold)) {
                            <li style="margin-right:0.5rem; text-decoration:line-through; text-decoration-color:#808080; display:inline">@StoreNameModule.asText(s.Store.StoreName)</li>
                        }
                    </ul>
                }
            </div>
        }
        <div class="propertyGrid enterLeft divButton @hasNoteClass" @onclick="e=>GoNote()">
            <ion-icon name="newspaper-outline"></ion-icon>
            <div style="line-height:1"><small>@(hasNote ? Form.Note.ValueCommitted : "Note...")</small></div>
        </div>
        @if (Form.CanDelete()) {
            <button style="margin-top:1.0rem; margin-left:0.5rem" type="button" class="btn btn-light" @onclick="OnDelete"><ion-icon name="trash-outline"></ion-icon>&nbsp;Delete</button>
        }
    </ModesItem>
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight"><ion-icon name="chevron-back-outline"></ion-icon></button>
            <strong class="navbar-text enterRight">Note</strong>
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight">Save</button>
        </nav>
        <div class="col enterRight" style="margin-top:1rem">
            <textarea rows="5" class="form-control" id="inputNote" placeholder="Preferred brand, selection criteria, alternates, price guidelines, ..." @oninput="e=>OnNoteChange((string)e.Value)" @onfocusout="OnNoteFocusOut" value="@Form.Note.ValueCommitted"></textarea>
            @if (Form.NoteValidation().IsError) {
                <div class="errorMessage">@Form.NoteValidation().ErrorValue</div>
            }
        </div>
    </ModesItem>
</Modes>
<StoresDrawer @ref="_storesDrawer" Closed="OnStoresSelected"></StoresDrawer>
<FrequencyDrawer @ref="_frequencyDrawer" OnSelected="OnFrequencySelected"></FrequencyDrawer>
<CategoryDrawer @ref="_categoryDrawer" OnSelected="OnCategorySelected"></CategoryDrawer>
<PostponeDrawer @ref="_postponeDrawer" OnSelected="OnPostponeSelected"></PostponeDrawer>