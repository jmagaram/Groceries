@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Models;
@using WebApp.Common;
@using static Models.ItemFormModule.ItemFormExtensions;

<style>
    .enterRight {
        animation: enterRightAnimation;
        animation-duration: 0.25s;
        animation-fill-mode: forwards;
        animation-timing-function: ease;
        position: relative;
    }

    @@keyframes enterRightAnimation {
        from {
            left: 125px;
        }

        to {
            left: 0px;
        }
    }

    .enterLeft {
        animation: enterLeftAnimation;
        animation-duration: 0.25s;
        animation-fill-mode: forwards;
        animation-timing-function: ease;
        position: relative;
    }

    @@keyframes enterLeftAnimation {
        from {
            right: 125px;
        }

        to {
            right: 0px;
        }
    }

    .fadeIn {
        animation-name: fadeIn;
        animation-fill-mode: forwards;
        animation-duration: 0.25s;
        animation-timing-function: ease;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .radioList {
        list-style-type: none;
        margin-top: 1rem;
        padding-left: 0px;
        margin-left: 1rem;
    }

        .radioList li {
            margin-bottom: 1.5rem
        }

    .propertyGrid {
        display: grid;
        grid-column-gap: 0.5em;
        grid-template-columns: 1em auto;
        width: 100%;
        margin-bottom: 1.25rem;
        margin-left: 1.25em;
        text-align: left;
        align-items: center;
        padding-right: 3rem;
    }

        .propertyGrid input {
            width: 100%;
            max-width: 40ch;
        }

    input.hardComplete {
        text-decoration: line-through;
        text-decoration-color: #808080;
        border-color: transparent;
    }

    .divButton:hover {
        cursor: pointer;
    }

    /* Could not get this to work on ios */
    button.propertyGrid {
        background-color: transparent;
        padding-left: 0px;
        border: 0px;
    }

    .errorMessage {
        font-size: 80%;
        color: #dc3545;
        margin-top: .25rem;
    }

    .iconButton {
    }

        .iconButton ion-icon {
            display: inline-block;
            vertical-align: bottom;
            height: 1.4em;
            font-size: 1.1em
        }

    .bounce-top {
        -webkit-animation: bounce-top 0.9s both;
        animation: bounce-top 0.9s both;
    }

    @@-webkit-keyframes bounce-top {
        0% {
            -webkit-transform: translateY(-45px);
            transform: translateY(-45px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
            opacity: 1;
        }

        24% {
            opacity: 1;
        }

        40% {
            -webkit-transform: translateY(-24px);
            transform: translateY(-24px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        65% {
            -webkit-transform: translateY(-12px);
            transform: translateY(-12px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        82% {
            -webkit-transform: translateY(-6px);
            transform: translateY(-6px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        93% {
            -webkit-transform: translateY(-4px);
            transform: translateY(-4px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        25%, 55%, 75%, 87% {
            -webkit-transform: translateY(0px);
            transform: translateY(0px);
            -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
        }

        100% {
            -webkit-transform: translateY(0px);
            transform: translateY(0px);
            -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
            opacity: 1;
        }
    }

    @@keyframes bounce-top {
        0% {
            -webkit-transform: translateY(-45px);
            transform: translateY(-45px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
            opacity: 1;
        }

        24% {
            opacity: 1;
        }

        40% {
            -webkit-transform: translateY(-24px);
            transform: translateY(-24px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        65% {
            -webkit-transform: translateY(-12px);
            transform: translateY(-12px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        82% {
            -webkit-transform: translateY(-6px);
            transform: translateY(-6px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        93% {
            -webkit-transform: translateY(-4px);
            transform: translateY(-4px);
            -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
        }

        25%, 55%, 75%, 87% {
            -webkit-transform: translateY(0px);
            transform: translateY(0px);
            -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
        }

        100% {
            -webkit-transform: translateY(0px);
            transform: translateY(0px);
            -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
            opacity: 1;
        }
    }

</style>
@if (Form == null) {
    <span>Loading...</span>
    return;
}
<Modes ActiveIndex="@ActiveIndex">
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <div class="enterLeft">
                @if (Form.HasErrors()) {
                    <button class="btn btn-dark iconButton fadeIn" @onclick="OnCancel"><ion-icon name="arrow-undo-outline"></ion-icon></button>
                }
                else {
                    <button class="btn btn-dark iconButton fadeIn" @onclick="OnSaveChanges"><ion-icon name="chevron-back-outline"></ion-icon></button>
                }
            </div>
            <span class="navbar-text enterLeft">@(Form.ItemId.IsNone() ? "New" : "Edit")</span>
            <form class="form-inline enterLeft">
                <div role="group">
                    <button type="button" class="btn btn-dark iconButton" disabled="@Form.HasErrors()" @onclick="OnSaveChanges">Save</button>
                </div>
            </form>
        </nav>
        <div class="propertyGrid enterLeft" style="margin-top:1rem; font-size:larger">
            <div style="margin-top:0.5rem"><Checkbox IsChecked="@Form.IsComplete" IsCheckedChanged="_=>OnToggleComplete()" Title="" /></div>
            <div>
                @{
                    bool isHardComplete = Form.ScheduleKind.IsCompleted;
                    string c = (isHardComplete ? "hardComplete" : "");
                }
                <input class="@c" type="text" placeholder="Item to buy" @oninput="OnItemNameChange" @onfocusout="OnItemNameFocusOut" value="@Form.ItemName.ValueCommitted" />
                @if (Form.ItemNameValidation().IsError) {
                    <div class="errorMessage">@Form.ItemNameValidation().ErrorValue</div>
                }
            </div>
        </div>
        <div class="propertyGrid enterLeft">
            <div><ion-icon name="bar-chart-outline"></ion-icon></div>
            <div>
                <input type="text" placeholder="Quantity (optional)" @oninput="e=>OnQuantityChange((string)e.Value)" @onfocusout="OnQuantityFocusOut" value="@Form.Quantity.ValueCommitted" />
                @if (Form.QuantityValidation().IsError) {
                    <div class="errorMessage text-danger">@Form.QuantityValidation().ErrorValue</div>
                }
            </div>
        </div>
        <div class="propertyGrid enterLeft divButton" @onclick="e=>GoCategories()">
            <ion-icon name="color-palette"></ion-icon>
            @if (!string.IsNullOrWhiteSpace(Form.CategoryCommittedName())) {
                <div>@Form.CategoryCommittedName()</div>
            }
            else {
                <div class="text-secondary">Category...</div>
            }
        </div>
        <div class="propertyGrid enterLeft divButton" @onclick="e=>GoFrequency()">
            <ion-icon name="repeat-outline"></ion-icon>
            @if (Form.ScheduleKind.IsRepeat) {
                <div>@Models.ItemFormModule.frequencyAsText(Form.Frequency)</div>
            }
            else {
                <div class="text-secondary">Repeat...</div>
            }
        </div>
        @if (Form.ScheduleKind.IsRepeat) {
            string postponeClass = HighlightPostpone ? "bounce-top" : "";
            HighlightPostpone = false;
            <div class="propertyGrid enterLeft divButton" @onclick="e=>GoPostpone()">
                <div><ion-icon name="calendar-outline"></ion-icon></div>
                @if (Form.Postpone.IsSome()) {
                    int daysAway = Form.Postpone.Value;
                    <div class="@postponeClass">
                        @ItemFormModule.postponeDurationAsText(Form.Postpone.Value)&nbsp;from now
                    </div>
                }
                else {
                    <div class="text-secondary">Postpone...</div>
                }
            </div>
        }
        @if (Form.Stores.Any()) {
            <div class="propertyGrid enterLeft divButton" @onclick="e=>GoStores()">
                <ion-icon name="storefront-outline"></ion-icon>
                @if (Form.Stores.All(i => i.IsSold)) {
                    <div class="text-secondary">All stores</div>
                }
                else {
                    <ul style="list-style-type:none; padding-left:0px;margin:0px;">
                        @foreach (var s in Form.Stores.Where(i => !i.IsSold)) {
                            <li style="margin-right:0.5rem; text-decoration:line-through; text-decoration-color:#808080; display:inline">@StoreNameModule.asText(s.Store.StoreName)</li>
                        }
                    </ul>
                }
            </div>
        }
        <div class="propertyGrid enterLeft divButton" @onclick="e=>GoNote()">
            <ion-icon name="newspaper-outline"></ion-icon>
            @if (Form.Note.ValueCommitted.Length > 0) {
                <div style="line-height:1"><small>@Form.Note.ValueCommitted</small></div>
            }
            else {
                <div class="text-secondary">Note...</div>
            }
        </div>
        @if (Form.CanDelete()) {
            <button style="margin-top:1.0rem; margin-left:0.5rem" type="button" class="btn btn-light" @onclick="OnDelete"><ion-icon name="trash-outline"></ion-icon>&nbsp;Delete</button>
        }
    </ModesItem>
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <button @onclick="_=>OnCategoryCancel()" class="btn btn-dark enterRight"><ion-icon name="chevron-back-outline"></ion-icon></button>
            <strong class="navbar-text enterRight">Category</strong>
            <span>&nbsp;</span>
        </nav>
        <ul class="enterRight radioList">
            <li>
                <Radio GroupName="cat" Value="uncat" Title="Uncategorized" IsChecked="@(Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsNone())" OnClick="_=>OnCategoryChooseUncategorized()" />
            </li>
            @foreach (var i in Form.CategoryChoiceList) {
                string description = CategoryNameModule.asText(i.CategoryName);
                string key = CategoryIdModule.serialize(i.CategoryId);
                bool isSelected = Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsSomeValue(i);
                <li>
                    <Radio GroupName="cat" Title="@description" IsChecked="@isSelected" OnClick="_=>OnCategoryChooseExisting(key)" />
                </li>
            }
        </ul>
    </ModesItem>
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight"><ion-icon name="chevron-back-outline"></ion-icon></button>
            <strong class="navbar-text enterRight">Frequency</strong>
            <span>&nbsp;</span>
        </nav>
        <ul class="enterRight radioList">
            <li><Radio GroupName="freq" Title="Only once (does not repeat)" IsChecked="@(Form.ScheduleKind.IsRepeat==false)" OnClick="s=>OnRepeatChange(-1)" /></li>
            @foreach (var i in Form.FrequencyChoices()) {
                string description = Models.ItemFormModule.frequencyAsText(i);
                string key = i.Item.ToString();
                bool isSelected = Form.ScheduleKind.IsRepeat && i.Equals(Form.Frequency);
                <li><Radio GroupName="freq" Title="@description" IsChecked="@isSelected" Value="@key" OnClick="s=>OnRepeatChange(FrequencyModule.days(i))" /></li>
            }
        </ul>
    </ModesItem>
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight"><ion-icon name="chevron-back-outline"></ion-icon></button>
            <strong class="navbar-text enterRight">Stores</strong>
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight">Save</button>
        </nav>
        <ul class="enterRight radioList">
            @foreach (var s in Form.Stores) {
                string description = @StoreNameModule.asText(s.Store.StoreName);
                <li>
                    <Checkbox Title="@description" IsCheckedChanged="b=>OnStoreChange(b, s.Store.StoreId)" IsChecked="@(s.IsSold)" />
                </li>
            }
        </ul>
    </ModesItem>
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight"><ion-icon name="chevron-back-outline"></ion-icon></button>
            <strong class="navbar-text enterRight">Note</strong>
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight">Save</button>
        </nav>
        <div class="col enterRight" style="margin-top:1rem">
            <textarea rows="5" class="form-control" id="inputNote" placeholder="Preferred brand, selection criteria, alternates, price guidelines, ..." @oninput="e=>OnNoteChange((string)e.Value)" @onfocusout="OnNoteFocusOut" value="@Form.Note.ValueCommitted"></textarea>
            @if (Form.NoteValidation().IsError) {
                <div class="errorMessage">@Form.NoteValidation().ErrorValue</div>
            }
        </div>
    </ModesItem>
    <ModesItem>
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <button @onclick="_=>GoBackHome()" class="btn btn-dark enterRight"><ion-icon name="chevron-back-outline"></ion-icon></button>
            <strong class="navbar-text enterRight">Postpone</strong>
            <span>&nbsp;</span>
        </nav>
        <ul class="enterRight radioList">
            <li>
                <Radio GroupName="post" IsChecked="@Form.Postpone.IsNone()" Title="On shopping list now" IsCheckedChanged="_=>OnPostponeRemove()" />
            </li>
            @foreach (var i in Form.PostponeChoices()) {
                string description = $"+{Models.ItemFormModule.postponeDurationAsText(i)}";
                bool isSelected = Form.ScheduleKind.IsRepeat && Form.Postpone.IsSomeValue(i);
                <li>
                    <Radio GroupName="post" IsChecked="@isSelected" Title="@description" IsCheckedChanged="_=>OnPostponeDays(i)" />
                </li>
            }
        </ul>
    </ModesItem>
</Modes>
