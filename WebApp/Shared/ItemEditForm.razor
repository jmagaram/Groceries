@using Microsoft.FSharp.Core;
@using static Models.ItemFormModule;
@using Models; 
@using Common;

<style>
    .nav-pills li {
        margin-right: 5px;
    }

    .iconButton {
        display: flex;
        flex-direction: row;
        margin-bottom: 4px;
    }

        .iconButton > :nth-child(1) {
            font-weight: bold;
            width: 1em;
            margin-right: 0.5em;
        }

    .availabilityButton {
        margin-left:0px;
    }

        .availabilityButton ul {
            list-style: none;
            padding-left: 0px;
            margin-bottom:inherit;
        }

            .availabilityButton ul li {
                display: inline;
                text-decoration: line-through;
                text-decoration-color: rgba(0, 0, 0, 0.55);
                margin-left:3px;
                margin-right:3px;
            }

</style>
@if (Form != null) {
    <div class="row justify-content-between align-items-center sticky-top" style="padding-bottom:7px; padding-top:7px; margin-left:0; margin-right:0; border-bottom:solid 1px #d3d3d3; background-color:white">
        <div class="col nav col-auto">
            @if (Form.ItemId.IsNone()) {
                <h4>New item</h4>
            }

            else {
                <h4>Edit item</h4>
            }
        </div>
        <ul class="col col-auto form-inline nav nav-pills">
            @if (Form.CanDelete()) {
                <li>
                    @*Delete*@
                    <button class="btn btn-secondary" type="button" @onclick="_=>OnDelete()"><span class="oi oi-trash" aria-hidden="true"></span></button>
                </li>
            }
            @if (!Form.ScheduleKind.IsCompleted) {
                <li>
                    <button type="button" disabled="@Form.HasErrors()" class="btn btn-secondary" @onclick="OnSubmitPurchased">Complete</button>
                </li>
                <li>
                    <button class="btn btn-primary" type="button" @onclick="_=>OnSaveChanges()" disabled="@Form.HasErrors()">&nbsp;&nbsp;Save&nbsp;&nbsp;</button>
                </li>
            }
            else {
                <li>
                    <button type="button" disabled="@Form.HasErrors()" class="btn btn-primary" @onclick="AddToShoppingListAgain">Buy again</button>
                </li>
            }
        </ul>
    </div>
    <form>
        <div class="form-group">
            <label for="itemNameInput">Item</label>
            <input id="itemNameInput" class="form-control" @oninput="OnItemNameChange" @onfocusout="OnItemNameFocusOut" placeholder="Apples, Canned Tuna, ..." value="@Form.ItemName.ValueCommitted" />
            @if (Form.ItemNameValidation().IsError) {
                <small class="form-text text-danger">@Form.ItemNameValidation().ErrorValue</small>
            }
        </div>
        <div class="form-group">
            <label for="quantityInput">Quantity</label>
            <input id="quantityInput" class="form-control" @oninput="OnQuantityChange" @onfocusout="OnQuantityFocusOut" placeholder="several, 2 lb., lots, ..." value="@Form.Quantity.ValueCommitted" />
            @if (Form.QuantityValidation().IsError) {
                <small class="form-text text-danger">@Form.QuantityValidation().ErrorValue</small>
            }
        </div>
        <div class="form-row">
            <div class="form-group col-auto">
                <label for="selectCategory">Category</label>
                <select class="form-control" @onchange="OnExistingCategoryChange" id="selectCategory">
                    <option selected="@(Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsNone())" value="@chooseUncategorized">Uncategorized</option>
                    @foreach (var i in Form.CategoryChoiceList) {
                        string description = i.CategoryName.Item;
                        string key = i.CategoryId.Item.ToString();
                        bool isSelected = Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsSomeValue(i);
                        <option selected="@isSelected" value="@key">
                            @description
                        </option>
                    }
                    <option selected="@Form.CategoryMode.IsCreateNew" value="@chooseCreateNewCategory">New category...</option>
                    }
                </select>
            </div>
            @if (Form.CategoryMode.IsCreateNew) {
                <div class="form-group col-auto" style="margin-left:10px">
                    <label for="newCategoryName">&nbsp;</label>
                    <input id="newCategoryName" class="form-control" value="@Form.NewCategoryName.ValueCommitted" @oninput="OnNewCategoryNameChange" @onfocusout="OnNewCategoryNameFocusOut" placeholder="Category name" />
                    @if (Form.CategoryNameValidation().IsError) {
                        <small class="form-text text-danger">@Form.CategoryNameValidation().ErrorValue</small>
                    }
                </div>
            }
        </div>
        <div class="form-row align-items-center">
            @{
                string frequencyText = "";
                if (Form.ScheduleKind.IsRepeat) {
                    frequencyText = Models.ItemFormModule.frequencyAsText(Form.Frequency);
                }
                else {
                    frequencyText = "Only once";
                }
            }
            <button class="iconButton btn btn-outline-dark" style="margin-left:5px" @onclick:preventDefault @onclick="ShowFrequencyDialog">
                <div>
                    @if (Form.ScheduleKind.IsRepeat) {<span style="color:blue" class="oi oi-loop-circular"></span>}
                    else { <span class="oi oi-loop-circular" style="opacity:0.2"></span>}
                </div><div>@frequencyText</div>
            </button>
            @if (Form.ScheduleKind.IsRepeat) {
                <div class="col-auto">
                    <div class="form-check" style="margin-left: 5px;">
                        <input @onchange="OnPostponeToggle" checked="@Form.Postpone.IsSome()" class="form-check-input" type="checkbox" value="" id="postponeToggle" required>
                        <label class="form-check-label" for="postponeToggle">
                            Postpone
                        </label>
                    </div>
                </div>
                Dictionary<string, object> attr = new Dictionary<string, object>();
                if (Form.Postpone.IsNone()) {
                    attr.Add("style", "visibility:hidden");
                }
                <div class="col-auto">
                    <select @attributes="@attr" class="form-control" @onchange="OnPostponeChange">
                        @foreach (var i in Form.PostponeChoices()) {
                            string description = Models.ItemFormModule.postponeDurationAsText(i);
                            string key = i.ToString();
                            bool isSelected = Form.Postpone.IsSomeValue(i);
                            <option selected="@isSelected" value="@key">+@description</option>
                        }
                    </select>
                </div>
            }
        </div>
        <ElixDialog @bind-IsOpen="IsStoreAvailabilityDialogOpen" @bind-IsOpen:event="IsOpenChanged">
            <StoreAvailabilitySelector Availability="Form.Stores.ToArray()"
                                       OnChoose="e=> ProcessStoreAvailability(e)"
                                       OnCancel="HideStoreAvailabilityDialog">
            </StoreAvailabilitySelector>
        </ElixDialog>
        @if (!Form.Stores.IsEmpty) {
            if (Form.Stores.Any(i => !i.IsSold)) {
                <button class="btn btn-outline-dark availabilityButton" @onclick:preventDefault @onclick="ShowStoreAvailabilityDialog">
                    <ul>
                        @foreach (var j in Form.Stores.Where(k => !k.IsSold)) {
                            <li>@j.Store.StoreName.Item</li>
                        }
                    </ul>
                </button>
            }
            else {
                <button class="btn btn-outline-dark availabilityButton" style="color:darkgray" @onclick:preventDefault @onclick="ShowStoreAvailabilityDialog">
                    All stores
                </button>
            }
        }
        <div class="form-group">
            <label for="noteTextArea">Note</label>
            <textarea id="noteTextArea" class="form-control" style="width:400px" rows="3" @oninput="OnNoteChange" @onfocusout="OnNoteFocusOut" placeholder="preferred brand, extra soft!, ..." value="@Form.Note.ValueCommitted" />
            @if (Form.NoteValidation().IsError) {
                <small class="form-text text-danger">@Form.NoteValidation().ErrorValue</small>
            }
        </div>
        <ElixDialog @bind-IsOpen="@IsFrequencyDialogOpen" @bind-IsOpen:event="IsOpenChanged">
            <FrequencySelector Choices="Form.FrequencyChoices().ToArray()"
                               Selected="!Form.ScheduleKind.IsRepeat ? null : Form.Frequency"
                               Cancel="_=>IsFrequencyDialogOpen=false"
                               OnChooseNone="_=>OnFrequencySelect(notRepeating)"
                               OnChooseOne="f=>OnFrequencySelect(f.Item)"></FrequencySelector>
        </ElixDialog>
    </form>
}
else {
    <p>Loading...</p>}