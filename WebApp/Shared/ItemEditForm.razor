@using Microsoft.FSharp.Core;
@using static Models.ItemForm;
@using static Common.OptionExtensions;

<form>
    <div>
        <div>
            <input @oninput="OnScheduleOnce" checked="@Form.ScheduleKind.IsOnce" type="radio" id="setOnce" name="status" value="once">
            <label for="setOnce">Once</label>
        </div>

        <div>
            <input @oninput="OnScheduleRepeat" checked="@Form.ScheduleKind.IsRepeat" type="radio" id="setRepeat" name="status" value="repeat">
            <label for="setRepeat">Repeat</label>
        </div>

        <div>
            <input @oninput="OnScheduleCompleted" checked="@Form.ScheduleKind.IsCompleted" type="radio" id="setComplete" name="status" value="complete">
            <label for="setComplete">Complete</label>
        </div>
    </div>
    <div>
        <label>
            Name: <input @oninput="OnItemNameChange" @onfocusout="OnItemNameFocusOut" placeholder="Apples, Canned Tuna, ..." value="@Form.ItemName" />
            @if (Form.ItemNameValidation.IsError) {
                <span>Error: @Form.ItemNameValidation.ErrorValue</span>
            }
        </label>
    </div>
    <div>
        <label>
            Quantity: <input @oninput="OnQuantityChange" @onfocusout="OnQuantityFocusOut" placeholder="several, 2 lb., lots, ..." value="@Form.Quantity" />
            @if (Form.QuantityValidation.IsError) {
                <span>Error: @Form.QuantityValidation.ErrorValue</span>
            }
        </label>
    </div>
    <div>
        <label>
            Category:
            <select @onchange="OnExistingCategoryChange">
                <option selected="@(Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsNone())" value="@chooseUncategorized">Uncategorized</option>
                @foreach (var i in Form.CategoryChoiceList) {
                    string description = i.CategoryName.Item;
                    string key = i.CategoryId.Item.ToString();
                    bool isSelected = Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsSomeValue(i);
                    <option selected="@isSelected" value="@key">
                        @description
                    </option>
                }
                <option selected="@Form.CategoryMode.IsCreateNew" value="@chooseCreateNewCategory">New category...</option>
                }
            </select>
        </label>
    </div>
    @if (Form.CategoryMode.IsCreateNew) {
        <div>
            <label>
                <input style="margin-left:30px" value="@Form.NewCategoryName" @oninput="OnNewCategoryNameChange" @onfocusout="OnNewCategoryNameFocusOut" placeholder="Category name" />
                @if (Form.CategoryNameValidation.IsError) {
                    <span>Error: @Form.CategoryNameValidation.ErrorValue</span>
                }
            </label>
        </div>
    }
    @if (Form.ScheduleKind.IsRepeat) {
        <div>
            <label>
                Frequency:
                <select @onchange="OnRepeatChange">
                    @foreach (var i in Form.FrequencyChoices) {
                        string description = Models.ItemForm.frequencyAsText(i);
                        string key = i.ToString();
                        bool isSelected = i == Form.Frequency;
                        <option selected="@isSelected" value="@key">@description</option>
                    }
                </select>
            </label>
        </div>
        <div>
            <label>
                Postpone:
                <select @onchange="OnPostponeChange">
                    <option selected="@Form.Postpone.IsNone()" value="@notPostponed">On shopping list now (not postponed)</option>
                    @foreach (var i in Form.PostponeChoices) {
                        string description = Models.ItemForm.postponeDurationAsText(i);
                        string key = i.ToString();
                        bool isSelected = Form.Postpone.IsSomeValue(i);
                        <option selected="@isSelected" value="@key">+ @description</option>
                    }
                </select>
            </label>
        </div>
    }
    @if (!Form.Stores.IsEmpty && !Form.ScheduleKind.IsCompleted) {
        <div>
            Stores:<br />
            @foreach (var i in Form.Stores) {
                <div>
                    <label>
                        <input type="checkbox" @oninput="e =>OnStoreChange(e, i.Store.StoreId)" id="@i.Store.StoreId" name="@i.Store.StoreId" checked="@i.IsSold">&nbsp;@i.Store.StoreName.Item
                    </label>
                </div>
            }
        </div>
    }
    <div>
        <label>
            Note: <textarea rows="3" @oninput="OnNoteChange" @onfocusout="OnNoteFocusOut" placeholder="preferred brand, extra soft!, ..." value="@Form.Note" />
            @if (Form.NoteValidation.IsError) {
                <span>Error: @Form.NoteValidation.ErrorValue</span>
            }
        </label>
    </div>
    @if (Form.ItemId.IsSome()) {
        <button class="btn btn-outline-secondary" type="button" @onclick="e=>OnDeleteCallback.InvokeAsync(e)">Delete</button>
    }
    <button class="btn btn-primary" type="button" @onclick="e=>OnClickOkCallback.InvokeAsync(Form.ItemFormResult(DateTimeOffset.Now))" disabled="@Form.HasErrors">Submit</button>
</form>