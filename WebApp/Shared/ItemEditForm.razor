@using Microsoft.FSharp.Core;
@using static Models.ItemForm;
@using static Common.OptionExtensions;
<style>
    .nav-pills li {
        margin-right:5px;
    }
</style>
<form>
    <button class="btn btn-outline-light btn-sm" type="button" @onclick="_=>OnSaveChanges()" disabled="@Form.HasErrors"><span class="oi oi-chevron-left" aria-hidden="true"></span></button>
    <h4 style="display:inline-block">
        @if (Form.ItemId.IsSome()) {<span>Edit item</span>}
        else { <span>New item</span>}
    </h4>

    @if (Form.ScheduleKind.IsRepeat && Form.Postpone.IsSome()) {
        string daysAway = Models.ItemForm.postponeDurationAsText(Form.Postpone.Value);
        <div class="alert alert-info" role="alert">
            <div style="display:inline-block" class="dropdown">
                <button class="btn btn-link dropdown-toggle" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Postponed +@($"{daysAway}")
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                    @foreach (var i in Form.PostponeChoices) {
                        <button class="dropdown-item" @onclick="@(e=>OnPostponeClick(i))" type="button">@Models.ItemForm.postponeDurationAsText(i)</button>
                    }
                    <div class="dropdown-divider"></div>
                    <button class="dropdown-item" type="button" @onclick="@(e=>OnPostponeClear())">Add to shopping list now</button>
                </div>
            </div>
        </div>
    }
    @if (Form.ScheduleKind.IsCompleted) {
        <div class="alert alert-success" role="alert">
            Complete! <button type="button" class="btn btn-link" role="button" @onclick="@(e => OnClickScheduleOnce())">Add to shopping list again</button>
        </div>
    }
    <div class="form-group">
        <label>
            Item <input class="form-control" @oninput="OnItemNameChange" @onfocusout="OnItemNameFocusOut" placeholder="Apples, Canned Tuna, ..." value="@Form.ItemName" />
            @if (Form.ItemNameValidation.IsError) {
                <small class="form-text text-muted">Error: @Form.ItemNameValidation.ErrorValue</small>
            }
        </label>
    </div>
    <div class="form-group">
        <label>
            Quantity <input class="form-control" @oninput="OnQuantityChange" @onfocusout="OnQuantityFocusOut" placeholder="several, 2 lb., lots, ..." value="@Form.Quantity" />
            @if (Form.QuantityValidation.IsError) {
                <small class="form-text text-danger">@Form.QuantityValidation.ErrorValue</small>
            }
        </label>
    </div>
    <div class="form-group">
        <label>
            Category
            <select class="form-control" @onchange="OnExistingCategoryChange">
                <option selected="@(Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsNone())" value="@chooseUncategorized">Uncategorized</option>
                @foreach (var i in Form.CategoryChoiceList) {
                    string description = i.CategoryName.Item;
                    string key = i.CategoryId.Item.ToString();
                    bool isSelected = Form.CategoryMode.IsChooseExisting && Form.CategoryChoice.IsSomeValue(i);
                    <option selected="@isSelected" value="@key">
                        @description
                    </option>
                }
                <option selected="@Form.CategoryMode.IsCreateNew" value="@chooseCreateNewCategory">New category...</option>
                }
            </select>
        </label>
    </div>
    @if (Form.CategoryMode.IsCreateNew) {
        <div class="form-group" style="margin-left:30px; width:200px;">
            <input class="form-control" value="@Form.NewCategoryName" @oninput="OnNewCategoryNameChange" @onfocusout="OnNewCategoryNameFocusOut" placeholder="Category name" />
            @if (Form.CategoryNameValidation.IsError) {
                <span class="text-danger">@Form.CategoryNameValidation.ErrorValue</span>
            }
        </div>
    }
    @if (Form.ScheduleKind.IsOnce || Form.ScheduleKind.IsRepeat) {
        <div class="form-group">
            <label>
                Frequency
                <select class="form-control" @onchange="OnRepeatChange">
                    @foreach (var i in Form.FrequencyChoices) {
                        string description = Models.ItemForm.frequencyAsText(i);
                        string key = i.Item.ToString();
                        bool isSelected = i.Equals(Form.Frequency);
                        <option selected="@isSelected" value="@key">@description</option>
                    }
                    <option selected="@(!Form.ScheduleKind.IsRepeat)" value="@notRepeating">(just once; does not repeat)</option>
                </select>
            </label>
        </div>
    }
    @if (!Form.Stores.IsEmpty && !Form.ScheduleKind.IsCompleted) {
        <div class="form-group">
            Stores<br />
            @foreach (var i in Form.Stores) {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @oninput="e =>OnStoreChange(e, i.Store.StoreId)" id="@i.Store.StoreId" name="@i.Store.StoreId" checked="@i.IsSold" />
                    <label class="form-check-label" for="@i.Store.StoreId">@i.Store.StoreName.Item</label>
                </div>
            }
        </div>
    }
    <div class="form-group">
        <label>
            Note<textarea class="form-control" style="width:400px" rows="3" @oninput="OnNoteChange" @onfocusout="OnNoteFocusOut" placeholder="preferred brand, extra soft!, ..." value="@Form.Note" />
            @if (Form.NoteValidation.IsError) {
                <span>@Form.NoteValidation.ErrorValue</span>
            }
        </label>
    </div>
    <hr />
    <ul class="nav nav-pills">
        <li>
            @if (Form.CanDelete) {
                <button class="btn btn-outline-secondary" type="button" @onclick="_=>OnDelete()"><span class="oi oi-trash" aria-hidden="true"></span></button>
            }
        </li>        @*SUBMIT CHANGES*@
    <li>
        <button class="btn btn-primary" type="button" @onclick="_=>OnSaveChanges()" disabled="@Form.HasErrors"><span class="oi oi-chevron-left" aria-hidden="true"></span></button>
    </li>
        @*COMPLETE AND SCHEDULE NEXT*@
    <li>
        @if (Form.ScheduleKind.IsRepeat) {
            <button type="button" disabled="@Form.HasErrors" class="btn btn-primary" @onclick="OnSubmitPurchased"><span class="oi oi-check" aria-hidden="true"></span>&nbsp;Complete</button>
        }
    </li>
        @*POSTPONE X DAYS AND SUBMIT*@
    <li>
        @if (Form.ScheduleKind.IsRepeat && Form.Postpone.IsNone()) {
            <div class="dropdown">
                <button disabled="@Form.HasErrors" class="btn btn-primary dropdown-toggle" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="oi oi-calendar" aria-hidden="true"></span>&nbsp;Postpone
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                    @foreach (var i in Form.PostponeChoices) {
                        <button class="dropdown-item" @onclick="@(_=>OnSubmitPostponed(i))" type="button">@Models.ItemForm.postponeDurationAsText(i)</button>
                    }
                </div>
            </div>
        }
    </li>
        @*MARK COMPLETE AND TOTALLY DONE*@
    <li>
        @if (Form.ScheduleKind.IsOnce) {
            <button type="button" disabled="@Form.HasErrors" class="btn btn-primary" @onclick="OnSubmitPurchased"><span class="oi oi-check" aria-hidden="true"></span>&nbsp;Complete</button>
        }
    </li>
        @*CANCEL*@
    <li>
        <button type="button" class="btn btn-primary" @onclick="OnCancel"><span class="oi oi-action-undo" aria-hidden="true"></span></button>
    </li>    </ul>

</form>