@using static Models.CoreTypes
<style>
    .modalDialog {
        display: flex;
        flex-direction: column;
        width: 300px;
        padding: 10px;
        margin-left: auto;
        margin-right: auto;
        background-color: white;
    }

    .dialog3ColumnHeader {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-bottom: 2ex;
    }

        .dialog3ColumnHeader > :nth-child(2) {
            font-weight: bold;
        }

    .iconButton {
        display: flex;
        flex-direction: row;
        margin-bottom: 4px;
    }

        .iconButton > :nth-child(1) {
            font-weight: bold;
            width:1em;
            margin-right: 0.5em;
        }
</style>

<div class="modalDialog">
    <div class="dialog3ColumnHeader">
        <div>&nbsp;</div>
        <div>Frequency</div>
        <div>
            <button class="btn btn-sm btn-link" @onclick="_=>Cancel.InvokeAsync(null)" @onclick:preventDefault>Cancel</button>
        </div>
    </div>
    @foreach (var i in Choices) {
        string description = Models.ItemFormModule.frequencyAsText(i);
        bool isSelected = i.Equals(Selected);
        <button class="iconButton btn btn-outline-secondary" @onclick="_=>OnChooseOne.InvokeAsync(i)" @onclick:preventDefault>
            <div>
                @if (isSelected) {<span class="oi oi-caret-right" aria-hidden="true"></span>}
                else {<span></span>}
            </div><div>@description</div>
        </button>
    }
    <button class="iconButton btn btn-outline-secondary" @onclick="_=>OnChooseNone.InvokeAsync(null)" @onclick:preventDefault>
        <div>
            @if (Selected == null) {<span class="oi oi-caret-right" aria-hidden="true"></span>}
            else { <span></span>}
        </div><div>Does not repeat</div>
    </button>
</div>

@code {
    [Parameter]
    public Frequency[] Choices { get; set; }

    [Parameter]
    public Frequency Selected { get; set; }

    [Parameter]
    public EventCallback<Frequency> OnChooseOne { get; set; }

    [Parameter]
    public EventCallback OnChooseNone { get; set; }

    [Parameter]
    public EventCallback Cancel { get; set; }
}
