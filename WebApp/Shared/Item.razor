@using Common
@using Models
@using static Models.CoreTypes

<div class="itemContainer">
    @if (!ItemQry.Schedule.IsActive())
    {
        <button class="iconColumn" ontouchstart="" @onclick="async _ => await OnClickAddToShoppingList.InvokeAsync(ItemQry.ItemId)"><ion-icon name="add-circle"></ion-icon></button>
    }
    <button ontouchstart="" @onclick="async _=>await OnClick.InvokeAsync(ItemQry.ItemId)">
            @{
                string completedClass = ItemQry.Schedule.IsCompleted ? "completed" : "";
                var daysAway = ItemQry.Schedule.PostponedUntilDays(DateTimeOffset.Now).AsNullable();
                bool isSoon = daysAway.HasValue && daysAway.Value <= 5;
                bool isLater = daysAway.HasValue && daysAway.Value > 5;
                var weeksAway = daysAway / 7;
                var monthsAway = daysAway / 30;
                var propertiesClass = ItemQry.Schedule.IsActive() ? "" : "inactive";
            }
        <div class="properties @propertiesClass">
            <div class="title">
                <ul class="@completedClass">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.ItemName))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>
                @if (isSoon)
                {
                    <div class="soonBadge myBadge">
                        <ion-icon name="calendar-outline"></ion-icon><span>soon</span>
                    </div>
                }
                else if (isLater)
                {
                    string description =
                        (weeksAway <= 1) ? "+1 wk" :
                        (monthsAway == 0) ? $"+{weeksAway.Value} wks" :
                        (monthsAway == 1) ? "+1 mo" :
                        $"+{monthsAway.Value} mos";

                    <div class="laterBadge myBadge">
                        <ion-icon name="calendar-outline"></ion-icon><span>@description</span>
                    </div>
                }
            </div>
            @if (ItemQry.Quantity.IsSome())
            {
                <ul class="quantity @completedClass">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Quantity.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>
            }
            @if (ItemQry.Note.IsSome())
            {
                <ion-icon class="noteIcon" name="newspaper-outline"></ion-icon>
                <ul class="noteContent">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Note.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>}
            @if (ItemQry.Schedule.IsRepeat)
            {
                string frequency = Models.ItemFormModule.frequencyAsText(ItemQry.Schedule.Frequency().Value);
                <ion-icon class="frequencyIcon" name="repeat-outline"></ion-icon>
                <div class="frequencyContent"><span>@frequency</span></div>
            }
            @if (!HideStores && ItemQry.Availability.Any(i => i.IsSold == false))
            {
                <ion-icon class="storesIcon" name="storefront-outline"></ion-icon>
                <ul class="storesContent">
                    @foreach (var i in ItemQry.Availability.Where(j => j.IsSold == false).Select(j => j.Store.StoreName.AsText()))
                    {
                        <li>@i</li>
                    }
                </ul>
            }
        </div>
    </button>
</div>

@code {
    [Parameter]
    public Models.ShoppingListModule.Item ItemQry { get; set; }

    [Parameter]
    public bool HideStores { get; set; } = false;

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClick { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickAddToShoppingList { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickDue { get; set; }
}
