@using Common
@using Models
@using static Models.CoreTypes

<div class="itemContainer">
    @{
        var itemNameClass = ItemQry.Schedule.IsCompleted ? "completed" : "";
        var daysAway = ItemQry.Schedule.PostponedUntilDays(DateTimeOffset.Now);
        bool isSoon = daysAway.IsSome() && daysAway.Value <= 5;
        bool isLater = daysAway.IsSome() && daysAway.Value > 5;
        bool isActive = ItemQry.Schedule.IsActive();
        int? laterWeeks = daysAway.AsEnumerable().Select(i => new int?((i / 7) + 1)).FirstOrDefault();
        int? laterMonths = laterWeeks / 4;
    }
    @*@if (!isActive)
        {
            <button class="iconColumn" ontouchstart="" @onclick="async _ => await OnClickAddToShoppingList.InvokeAsync(ItemQry.ItemId)"><ion-icon name="add-outline"></ion-icon></button>
        }*@
    @if (isSoon || isLater)
    {
        <button class="badgeColumn" ontouchstart="" @onclick="_=>OnClickDue.InvokeAsync(ItemQry.ItemId)">
            @if (isSoon)
            {
                <div class="soonBadge">
                    <ion-icon name="calendar-outline"></ion-icon><span>Soon</span>
                </div>
            }
            else if (laterMonths >= 1)
            {
                var description = $"{laterMonths} mo";
                <div class="laterBadge" style="opacity:0.7">
                    <ion-icon name="calendar-outline"></ion-icon><span>@description</span>
                </div>
            }
            else
            {
                var description = $"{laterWeeks} wk";
                <div class="laterBadge">
                    <ion-icon name="calendar-outline"></ion-icon><span>@description</span>
                </div>
            }
        </button>
    }
    @if (ItemQry.Schedule.IsCompleted)
    {
        <div class="badgeColumn"></div>
    }
    <button ontouchstart="" @onclick="async _=>await OnClick.InvokeAsync(ItemQry.ItemId)">
        <div class="properties">
            @{
                string completedClass = ItemQry.Schedule.IsCompleted ? "completed" : "";
            }
            <ul class="title @completedClass">
                @foreach (var i in FormattedTextModule.spans(ItemQry.ItemName))
                {
                    string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                    <li class="@highlightClass">@i.Text</li>
                }
            </ul>
            @if (ItemQry.Quantity.IsSome())
            {
                <ul class="quantity @completedClass">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Quantity.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>
            }
            @if (ItemQry.Note.IsSome())
            {
                <ion-icon class="noteIcon" name="newspaper-outline"></ion-icon>
                <ul class="noteContent">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Note.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>}
            @if (ItemQry.Schedule.IsRepeat)
            {
                string frequency = Models.ItemFormModule.frequencyAsText(ItemQry.Schedule.Frequency().Value);
                <ion-icon class="frequencyIcon" name="repeat-outline"></ion-icon>
                <div class="frequencyContent"><span>@frequency</span></div>
            }
            @if (!HideStores && ItemQry.Availability.Any(i => i.IsSold == false))
            {
                <ion-icon class="storesIcon" name="storefront-outline"></ion-icon>
                <ul class="storesContent">
                    @foreach (var i in ItemQry.Availability.Where(j => j.IsSold == false).Select(j => j.Store.StoreName.AsText()))
                    {
                        <li>@i</li>
                    }
                </ul>
            }
        </div>
    </button>
</div>

@code {
    [Parameter]
    public Models.ShoppingListModule.Item ItemQry { get; set; }

    [Parameter]
    public bool HideStores { get; set; } = false;

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClick { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickAddToShoppingList { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickDue { get; set; }
}
