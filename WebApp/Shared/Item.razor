@using Common
@using Models
@using static Models.StateTypes 
@using static Common.OptionExtensions

<style>
    .divider {
        color: lightgray
    }

    .completed {
        text-decoration: line-through
    }
</style>
<p>
    @{
        var itemNameClass = ItemQry.Schedule.IsCompleted ? "completed" : "";
    }
    @if (ItemQry.Schedule.IsRepeat) {
        @if (ItemQry.Schedule is Schedule.Repeat r && r.Item.PostponedUntil.IsSome()) {
            var daysAway = RepeatModule.due(DateTimeOffset.Now, r.Item).Value;
            if (daysAway >= 7) {
                <span class="badge badge-secondary">@($"{daysAway}d")</span>
            }
            else if (daysAway > 0) {
                <span class="badge badge-primary">@($"{daysAway}d")</span>
            }
            else {
                <span class="badge badge-warning">@($"{-daysAway}d ago")</span>
            }
        }
        <text>&nbsp;</text><span class="oi oi-loop-circular" aria-hidden="true"></span><text>&nbsp;</text>
    }
    <a href="./ItemEdit2/@ItemQry.ItemId.Item">
        <span class="@itemNameClass">@ItemQry.ItemName.Item</span>
    </a>
    @if (!HideCategory) {
        var catName = ItemQry.Category.AsEnumerable().Select(i => i.CategoryName.Item).SingleOrDefault() ?? "(Uncategorized)";
        <span class="divider">&nbsp;|&nbsp;</span>@catName
    }
    @if (ItemQry.Quantity.IsSome()) {
        var quantity = ItemQry.Quantity.Value;
        <span class="divider">&nbsp;|&nbsp;</span>@ItemQry.Quantity.Value.Item
    }
    @if (ItemQry.Note.IsSome()) {
        var note = ItemQry.Note.Value;
        <span class="divider">&nbsp;|&nbsp;</span>@ItemQry.Note.Value.Item
    }
    <span class="divider">&nbsp;|&nbsp;</span><a href="." @onclick:preventDefault @onclick="@(async () => { await OnClickDelete.InvokeAsync(ItemQry.ItemId); })">
        delete
    </a>
    @if (!ItemQry.Schedule.IsCompleted) {
        <span class="divider">&nbsp;|&nbsp;</span><a href="." @onclick:preventDefault @onclick="@(async () => { await OnClickComplete.InvokeAsync(ItemQry.ItemId); })">
            complete
        </a>}

</p>

@code {
    [Parameter]
    public Models.QueryTypes.ItemQry ItemQry { get; set; }

    [Parameter]
    public bool HideCategory { get; set; } = false;

    [Parameter]
    public EventCallback<Models.StateTypes.ItemId> OnClickDelete { get; set; }

    [Parameter]
    public EventCallback<Models.StateTypes.ItemId> OnClickComplete { get; set; }
}