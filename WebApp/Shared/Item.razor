@using Common
@using Models
@using static Models.StateTypes
@using static Common.OptionExtensions

<style>
    .divider {
        color: lightgray
    }

    .completed {
        text-decoration: line-through
    }
</style>
<p>
    @{
        var itemNameClass = ItemQry.Schedule.IsCompleted ? "completed" : "";
    }
    @if (ItemQry.Schedule is Schedule.Repeat r) {
        @if (r.Item.PostponedUntil.IsSome()) {
            var daysAway = RepeatModule.due(DateTimeOffset.Now, r.Item).Value;
            if (daysAway >= 30) {
                <span class="badge badge-secondary">@($"{daysAway/30}m")</span>
            }
            else if (daysAway >= 7) {
                <span class="badge badge-dark">@($"{daysAway/7}w")</span>
            }
            else if (daysAway > 0) {
                <span class="badge badge-success">@($"{daysAway}d")</span>
            }
            else {
                <span class="badge badge-warning">@($"{-daysAway}d ago")</span>
            }
        }
        <text>&nbsp;</text><span class="oi oi-loop-circular" aria-hidden="true"></span><text>&nbsp;</text>
    }
    <div class="dropdown" style="display:inline-block">
        <a @onclick:preventDefault href="#" data-toggle="dropdown">
            <span class="@itemNameClass">@ItemQry.ItemName.Item</span>
        </a>
        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
            @if (!ItemQry.Schedule.IsCompleted) {
                <button class="dropdown-item" @onclick="@(async () => { await OnClickComplete.InvokeAsync(ItemQry.ItemId); })" type="button">Complete</button>
            }
            @if (ItemQry.Schedule.IsCompleted) {
                <button class="dropdown-item" @onclick="@(async () => { await OnClickBuyAgain.InvokeAsync(ItemQry.ItemId); })" type="button">Buy again</button>
            }
            @if (ScheduleModule.isPostponed(ItemQry.Schedule)) {
                <button class="dropdown-item" @onclick="@(async () => { await OnClickRemovePostpone.InvokeAsync(ItemQry.ItemId); })" type="button">Add to list now</button>
            }
            <a class="dropdown-item" href="./ItemEdit2/@ItemQry.ItemId.Item">Details...</a>
            <button class="dropdown-item" @onclick="@(async () => { await OnClickDelete.InvokeAsync(ItemQry.ItemId); })" type="button">Delete</button>
        </div>
    </div>
    @if (!HideCategory) {
        var catName = ItemQry.Category.AsEnumerable().Select(i => i.CategoryName.Item).SingleOrDefault() ?? "(Uncategorized)";
        <span class="divider">&nbsp;|&nbsp;</span>@catName
    }
    @if (ItemQry.Quantity.IsSome()) {
        var quantity = ItemQry.Quantity.Value;
        <span class="divider">&nbsp;|&nbsp;</span>@ItemQry.Quantity.Value.Item
    }
    @if (ItemQry.Note.IsSome()) {
        var note = ItemQry.Note.Value;
        <span class="divider">&nbsp;|&nbsp;</span>@ItemQry.Note.Value.Item
    }
</p>

@code {
    [Parameter]
    public Models.QueryTypes.ItemQry ItemQry { get; set; }

    [Parameter]
    public bool HideCategory { get; set; } = false;

    [Parameter]
    public EventCallback<Models.StateTypes.ItemId> OnClickDelete { get; set; }

    [Parameter]
    public EventCallback<Models.StateTypes.ItemId> OnClickComplete { get; set; }

    [Parameter]
    public EventCallback<Models.StateTypes.ItemId> OnClickBuyAgain { get; set; }

    [Parameter]
    public EventCallback<Models.StateTypes.ItemId> OnClickRemovePostpone { get; set; }

    public EventCallback<(Models.StateTypes.ItemId,int)> OnClickPostpone { get; set; }
}