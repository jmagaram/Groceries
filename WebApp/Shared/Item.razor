@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable
@using Common
@using Models
@using static Models.CoreTypes
@using static Common.OptionExtensions
@using static Models.ScheduleModule.ScheduleExtensions

<style>
    .postponeBadge {
        width: 30px;
    }

    .repeater {
        width: 15px;
        margin-right: 10px;
    }

    .category {
    }

    .note {
        line-height: 1.0;
    }

    .stores {
        line-height: 1.0;
    }

    .quantity {
        margin-left: 5px;
        padding-left: 5px;
        border-left: 1px solid #d3d3d3;
    }

    .wholething {
        margin-bottom: 12px;
    }

    elix-menu-button {
        margin-right: 5px;
    }

        elix-menu-button::part(source) {
            height: inherit;
            width: inherit;
        }

    .menu {
        transition: all ease-out 0.05s; /*when returning to this*/
        border: 1px solid rgba(229, 229, 229, 0.00);
        padding:0px;
        background-color: inherit;
    }

        .menu.opened {
            border: 1px solid rgba(229, 229, 229, 1.00);
            padding:4px;
            margin-left:-4px;
            margin-top:-4px;
            background-color: #ededed;
        }

</style>

<elix-menu-button class="@MenuClass" @ref="ContextMenu" id="sampleMenu" aria-label="Sample Menu" source-part-type="div" style="display:block">
    @if (!ItemQry.Schedule.IsCompleted) {
        <elix-menu-item id="@MenuChoice.Complete">Complete</elix-menu-item>
    }
    @if (ItemQry.Schedule.IsCompleted) {
        <elix-menu-item id="@MenuChoice.BuyAgain">Buy again</elix-menu-item>
    }
    @if (!ItemQry.Schedule.IsRepeat) {
        <elix-menu-item id="@MenuChoice.Delete">Delete</elix-menu-item>
    }
    <elix-menu-separator></elix-menu-separator>
    @if (ItemQry.Schedule is Schedule.Repeat) {
        @if (ItemQry.Schedule.IsPostponed()) {
            <elix-menu-item id="@MenuChoice.Now">Add to shopping list now</elix-menu-item>
        }
        <elix-menu-item id="@MenuChoice.Plus1Wk">Postpone +1 Week</elix-menu-item>
        <elix-menu-item id="@MenuChoice.Plus2Wk">Postpone +2 Weeks</elix-menu-item>
        <elix-menu-separator></elix-menu-separator>
    }
    <elix-menu-item id="@MenuChoice.Details">Details...</elix-menu-item>
    <div slot="source" class="wholething" style="display:flex; flex-direction:row">
        @{
            var itemNameClass = ItemQry.Schedule.IsCompleted ? "completed" : "";
        }
        <div class="postponeBadge">
            @if (ItemQry.Schedule is Schedule.Repeat r) {
                var postponedUntilDays = ItemQry.Schedule.PostponedUntilDays(DateTimeOffset.Now);
                @if (postponedUntilDays.IsSome()) {
                    var daysAway = postponedUntilDays.Value;
                    if (daysAway >= 30) {
                        <span class="badge badge-secondary">@($"{daysAway / 30}m")</span>
                    }
                    else if (daysAway >= 7) {
                        <span class="badge badge-dark">@($"{daysAway / 7}w")</span>
                    }
                    else if (daysAway > 0) {
                        <span class="badge badge-success">@($"{daysAway}d")</span>
                    }
                    else {
                        <span class="badge badge-danger"><span class="oi oi-bell" aria-hidden="true"></span></span>
                    }
                }
            }
        </div>
        <div class="repeater">
            @if (ItemQry.Schedule.IsRepeat) {
                <span class="oi oi-loop-circular" style="display:inline-flex" aria-hidden="true"></span>
            }
            else {
                <text>&nbsp;</text>
            }
        </div>
        <div style="display:flex; flex-direction:column; cursor:pointer">
            <div style="display:flex; flex-direction:row">
                <FormattedText Text="ItemQry.ItemName" Strikethrough="ItemQry.Schedule.IsCompleted" />
                @if (ItemQry.Quantity.IsSome()) {
                    var quantity = ItemQry.Quantity.Value;
                    <div class="quantity">
                        <FormattedText Text="@ItemQry.Quantity.Value" />
                    </div>}
            </div>        @if (!HideCategory) {
                var catName = ItemQry.Category.AsEnumerable().Select(i => i.CategoryName.Item).SingleOrDefault() ?? "(Uncategorized)";
                <div class="category">
                    @catName
                </div>}
            @if (ItemQry.Note.IsSome()) {
                var note = ItemQry.Note.Value;
                <div class="note">
                    <FormattedText IsSmall="true" Text="@ItemQry.Note.Value" />
                </div>}
            @{
                var ns = string.Join(", ", ItemQry.Availability.Where(i => !i.IsSold).Select(i => i.Store.StoreName.Item));
                if (ns != "") {
                    <div class="stores">
                        <small style="text-decoration:line-through; color:darkgray">@ns</small>
                    </div> }
            }
        </div>
    </div>
</elix-menu-button>

@code {

    ElementReference ContextMenu;
    DotNetObjectReference<InvokeActionHelper<string>> _contextMenuCallback;
    DotNetObjectReference<InvokeActionHelper<bool>> _isMenuOpened;

    enum MenuChoice {
        Complete,
        BuyAgain,
        Delete,
        Now,
        Plus1Wk,
        Plus2Wk,
        Details
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            InvokeActionHelper<string> invokeHelper = new InvokeActionHelper<string>(OnClose);
            _contextMenuCallback = DotNetObjectReference.Create(invokeHelper);
            await JSRuntime.InvokeVoidAsync("ElixMenuButton.addCloseEventListener", ContextMenu, "WebApp", "Invoke", _contextMenuCallback);

            InvokeActionHelper<bool> openClosedHelper = new InvokeActionHelper<bool>(OnOpenedOrClosed);
            _isMenuOpened = DotNetObjectReference.Create(openClosedHelper);
            await JSRuntime.InvokeVoidAsync("ElixMenuButton.addOpenChangedEventListener", ContextMenu, "WebApp", "Invoke", _isMenuOpened);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public string MenuClass { get; set; } = "menu";

    public async Task OnOpenedOrClosed(bool result) {
        MenuClass = result ? "menu opened" : "menu";
        StateHasChanged();
        await Task.CompletedTask;
    }

    public async Task OnClose(string id) {
        if (id != null) {
            MenuChoice choice = (MenuChoice)Enum.Parse(typeof(MenuChoice), id, true);
            switch (choice) {
                case MenuChoice.Complete: await OnClickComplete.InvokeAsync(ItemQry.ItemId); break;
                case MenuChoice.BuyAgain: await OnClickBuyAgain.InvokeAsync(ItemQry.ItemId); break;
                case MenuChoice.Delete: await OnClickDelete.InvokeAsync(ItemQry.ItemId); break;
                case MenuChoice.Now: await OnClickRemovePostpone.InvokeAsync(ItemQry.ItemId); break;
                case MenuChoice.Plus1Wk: await OnClickPostpone.InvokeAsync((ItemQry.ItemId, 7)); break;
                case MenuChoice.Plus2Wk: await OnClickPostpone.InvokeAsync((ItemQry.ItemId, 14)); break;
                case MenuChoice.Details: Navigation.NavigateTo($"./ItemEdit/{@ItemQry.ItemId.Item}"); break;
                default: throw new NotImplementedException();
            }
        }
    }

    [Parameter]
    public Models.ShoppingListModule.Item ItemQry { get; set; }

    [Parameter]
    public bool HideCategory { get; set; } = false;

    [Parameter]
    public EventCallback<Models.CoreTypes.ItemId> OnClickDelete { get; set; }

    [Parameter]
    public EventCallback<Models.CoreTypes.ItemId> OnClickComplete { get; set; }

    [Parameter]
    public EventCallback<Models.CoreTypes.ItemId> OnClickBuyAgain { get; set; }

    [Parameter]
    public EventCallback<Models.CoreTypes.ItemId> OnClickRemovePostpone { get; set; }

    [Parameter]
    public EventCallback<(Models.CoreTypes.ItemId, int)> OnClickPostpone { get; set; }

    public void Dispose() {
        _contextMenuCallback?.Dispose();
        _isMenuOpened?.Dispose();
    }
}
