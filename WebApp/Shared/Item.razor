@using Common
@using Models
@using static Models.CoreTypes

<div class="itemContainer">
    @if (!ItemQry.PostponeUntil.IsNone())
    {
        <button class="iconButton" ontouchstart="" @onclick="async _ => await OnClickAddToShoppingList.InvokeAsync(ItemQry.ItemId)"><ion-icon name="add-outline"></ion-icon></button>
    }
    <button ontouchstart="" @onclick="async _=>await OnClick.InvokeAsync(ItemQry.ItemId)" style="padding-right:0px;">
            @{
                var now = DateTimeOffset.Now;
                var daysAway = ItemModule.postponeDaysAwayOptional(now, ItemQry.PostponeUntil).AsNullable();
                bool isSoon = daysAway.HasValue && daysAway.Value <= 5;
                bool isLater = daysAway.HasValue && daysAway.Value > 5;
                var weeksAway = daysAway / 7;
                var monthsAway = daysAway / 30;
                var propertiesClass = ItemQry.PostponeUntil.IsNone() ? "" : "inactive";
            }
        <div class="properties @propertiesClass">
            <div class="title">
                <ul>
                    @foreach (var i in FormattedTextModule.spans(ItemQry.ItemName))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                    @if (isSoon)
                    {
                        <li class="soonBadge myBadge">
                            <ion-icon name="calendar-outline"></ion-icon><span>soon</span>
                        </li>
                    }
                    else if (isLater)
                    {
                        string description =
                            (weeksAway <= 1) ? "+1w" :
                            (monthsAway == 0) ? $"+{weeksAway.Value}w" :
                            (monthsAway == 1) ? "+1m" :
                            $"+{monthsAway.Value}m";

                        <li class="laterBadge myBadge">
                            <ion-icon name="calendar-outline"></ion-icon><span>@description</span>
                        </li>
                    }
                </ul>
            </div>
            @if (ItemQry.Quantity.IsSome())
            {
                <ul class="quantity">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Quantity.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>
            }
            @if (ItemQry.Note.IsSome())
            {
                <ion-icon class="noteIcon" name="newspaper-outline"></ion-icon>
                <ul class="noteContent">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Note.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>}
            @if (!HideStores && ItemQry.Availability.Any(i => i.IsSold == false))
            {
                <ion-icon class="storesIcon" name="storefront-outline"></ion-icon>
                <ul class="storesContent">
                    @foreach (var i in ItemQry.Availability.Where(j => j.IsSold == false).Select(j => j.Store.StoreName.AsText()))
                    {
                        <li>@i</li>
                    }
                </ul>
            }
        </div>
    </button>
</div>

@code {
    [Parameter]
    public Models.ShoppingListModule.Item ItemQry { get; set; }

    [Parameter]
    public bool HideStores { get; set; } = false;

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClick { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickAddToShoppingList { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickDue { get; set; }
}
