@using Common
@using Models
@using static Models.CoreTypes

<div class="itemContainer">
    @if (!ItemQry.PostponeUntil.IsNone())
    {
        <button class="iconButton" ontouchstart="" @onclick="async _ => await OnClickAddToShoppingList.InvokeAsync(ItemQry.ItemId)"><ion-icon name="add-outline"></ion-icon></button>
    }
    <button ontouchstart="" @onclick="async _=>await OnClick.InvokeAsync(ItemQry.ItemId)" style="padding-right:0px;">
        <div class="properties">
            <div class="title">
                <ul>
                    @foreach (var i in FormattedTextModule.spans(ItemQry.ItemName))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                    @if (ItemQry.PostponeUntil.AsNullable() is DateTimeOffset p)
                    {
                        var soonDays = 5u;
                        var now = DateTimeOffset.Now;
                        var duration = p - now;
                        var soon = now.AddDays(soonDays);
                        var isSoon = p <= soon;
                        var estimate = DurationEstimateModule.fromTimeSpan(duration);
                        var description = DurationEstimateModule.shortLabel(TimeSpan.FromDays(soonDays), estimate);
                        string iconName =
                            isSoon
                            ? "alarm-outline"
                            : "calendar-outline";
                        string badgeClass =
                            isSoon ? "soonBadge"
                            : estimate.DurationUnit.IsDays ? "daysBadge"
                            : estimate.DurationUnit.IsWeeks ? "weeksBadge"
                            : "monthsBadge";
                <li class="postponeBadge @badgeClass"><ion-icon name="@iconName" />@description</li>
                    }
                </ul>
            </div>
            @if (ItemQry.Quantity.IsSome())
            {
                <ul class="quantity">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Quantity.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>
            }
            @if (ItemQry.Note.IsSome())
            {
                <ion-icon class="noteIcon" name="newspaper-outline"></ion-icon>
                <ul class="noteContent">
                    @foreach (var i in FormattedTextModule.spans(ItemQry.Note.Value))
                    {
                        string highlightClass = i.Format.IsHighlight ? "highlight" : "";
                        <li class="@highlightClass">@i.Text</li>
                    }
                </ul>}
            @if (!HideStores && ItemQry.Availability.Any(i => i.IsSold == false))
            {
                <ion-icon class="storesIcon" name="storefront-outline"></ion-icon>
                <ul class="storesContent">
                    @foreach (var i in ItemQry.Availability.Where(j => j.IsSold == false).Select(j => j.Store.StoreName.AsText()))
                    {
                        <li>@i</li>
                    }
                </ul>
            }
        </div>
    </button>
</div>

@code {
    [Parameter]
    public Models.ShoppingListModule.Item ItemQry { get; set; }

    [Parameter]
    public bool HideStores { get; set; } = false;

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClick { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickAddToShoppingList { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickDue { get; set; }
}
