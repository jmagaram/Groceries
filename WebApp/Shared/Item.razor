@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using Common
@using Models
@using static Models.CoreTypes
@using static Common.OptionExtensions
@using static Models.ScheduleModule.ScheduleExtensions

<style>
    .postponeBadge {
        width: 30px;
        margin-right:5px;
    }

    .repeater {
        width: 15px;
        margin-right: 10px;
    }

    .category {
    }

    .note {
        line-height: 1.0;
    }

    .stores {
        line-height: 1.0;
    }

    .quantity {
        margin-left: 5px;
        padding-left: 5px;
        border-left: 1px solid #d3d3d3;
    }

    .wholething {
        margin-bottom: 12px;
    }

    elix-menu-button {
        margin-right: 5px;
    }

        elix-menu-button::part(source) {
            height: inherit;
            width: inherit;
        }

    .menu {
        transition: all ease-out 0.05s; /*when returning to this*/
        border: 1px solid rgba(229, 229, 229, 0.00);
        padding: 0px;
        background-color: inherit;
    }

        .menu.opened {
            border: 1px solid rgba(229, 229, 229, 1.00);
            padding: 4px;
            margin-left: -4px;
            margin-top: -4px;
            background-color: #ededed;
        }
</style>

<div class="wholething" style="display:flex; flex-direction:row">
    @{
        var itemNameClass = ItemQry.Schedule.IsCompleted ? "completed" : "";
    }
    @if (!HidePostponeDate) {
        <div class="postponeBadge">
            @if (ItemQry.Schedule is Schedule.Repeat r) {
                var postponedUntilDays = ItemQry.Schedule.PostponedUntilDays(DateTimeOffset.Now);
                @if (postponedUntilDays.IsSome()) {
                    var daysAway = postponedUntilDays.Value;
                    if (daysAway >= 30) {
                        <span class="badge badge-secondary">@($"{daysAway / 30}m")</span>
                    }
                    else if (daysAway >= 7) {
                        <span class="badge badge-dark">@($"{daysAway / 7}w")</span>
                    }
                    else if (daysAway > 0) {
                        <span class="badge badge-success">@($"{daysAway}d")</span>
                    }
                    else {
                        <span class="badge badge-danger"><Icon Kind="IconKind.Bell" /></span>
                    }
                }
            }
        </div>
    }
    @if (!HideRepeatIcon) {
        <div class="repeater">
            @if (ItemQry.Schedule.IsRepeat) {
                <span style="display:inline-flex" aria-hidden="true"><Icon Kind="IconKind.Repeat" /></span>
            }
            else {
                <text>&nbsp;</text>
            }
        </div>
    }
    <button class="itemButton" ontouchstart="" @onclick="async _=>await OnClick.InvokeAsync(ItemQry.ItemId)">
        <div style="display:flex; flex-direction:row">
            <div>
                <FormattedText Text="ItemQry.ItemName" Strikethrough="ItemQry.Schedule.IsCompleted" />
            </div>            @if (!HideQuantity && ItemQry.Quantity.IsSome()) {
                var quantity = ItemQry.Quantity.Value;
                <div class="quantity">
                    <FormattedText Text="@ItemQry.Quantity.Value" />
                </div>}
        </div>
        @if (!HideCategory) {
            var catName = ItemQry.Category.AsEnumerable().Select(i => i.CategoryName.Item).SingleOrDefault() ?? "(Uncategorized)";
            <div class="category">
                @catName
            </div>}
        @if (!HideNote && ItemQry.Note.IsSome()) {
            var note = ItemQry.Note.Value;
            <div class="note">
                <FormattedText IsSmall="true" Text="@ItemQry.Note.Value" />
            </div>}
        @{
            if (!HideStores) {
                var ns = string.Join(", ", ItemQry.Availability.Where(i => !i.IsSold).Select(i => i.Store.StoreName.Item));
                if (ns != "") {
                    <div class="stores">
                        <small style="text-decoration:line-through; color:darkgray">@ns</small>
                    </div> }
            }
        }
    </button>
</div>

@code {

    public string MenuClass { get; set; } = "menu";

    public async Task OnOpenedOrClosed(bool result) {
        MenuClass = result ? "menu opened" : "menu";
        StateHasChanged();
        await Task.CompletedTask;
    }

    [Parameter]
    public bool HidePostponeDate { get; set; } = false;

    [Parameter]
    public bool HideRepeatIcon { get; set; } = false;

    [Parameter]
    public Models.ShoppingListModule.Item ItemQry { get; set; }

    [Parameter]
    public bool HideCategory { get; set; } = false;

    [Parameter]
    public bool HideQuantity { get; set; } = false;

    [Parameter]
    public bool HideStores { get; set; } = false;

    [Parameter]
    public bool HideNote { get; set; } = false;

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClick { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickDelete { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickComplete { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickBuyAgain { get; set; }

    [Parameter]
    public EventCallback<(CoreTypes.ItemId item, int days)> OnClickBuyAgainRepeat { get; set; }

    [Parameter]
    public EventCallback<CoreTypes.ItemId> OnClickRemovePostpone { get; set; }

    [Parameter]
    public EventCallback<(CoreTypes.ItemId, int)> OnClickPostpone { get; set; }
}
