@implements IDisposable
@using static Models.CoreTypes
@using static Models.ItemQuickActionsModule
@using static Models.Extensions.CoreTypeExtensions

<ElixDrawer @ref="_drawer">
    @if (_viewModel == null)
        return;
    <div class="drawer">
        <header>
            <div></div>
            <h1>@_viewModel.ItemName.AsText()</h1>
            <button></button>
        </header>
        <div class="buttonGroup">
            @if (_viewModel.CanComplete) {
                <TouchButton TouchingClass="pressed" OnPressed="async _ => await OnComplete.InvokeAsync(_viewModel.ItemId)"><ion-icon name="checkmark-outline"></ion-icon>Complete</TouchButton>
            }
            @if (_viewModel.CanAddToShoppingListNow) {
                <TouchButton TouchingClass="pressed" OnPressed="async _ => await OnAddToShoppingListNow.InvokeAsync(_viewModel.ItemId)"><ion-icon name="add-outline"></ion-icon>Add to shopping list now</TouchButton>
            }
            @if (_viewModel.CanPostpone) {
                var attributes = new Dictionary<string, object> { ["class"] = "dropdownButton" };
                <div class="buttonRow">
                    <TouchButton TouchingClass="pressed" OnPressed="async _ => await OnPostponeDays.InvokeAsync((_viewModel.ItemId,7))"><ion-icon name="calendar-outline"></ion-icon>Postpone +1 week</TouchButton>
                    <TouchButton TouchingClass="pressed" Attributes="attributes" OnPressed="async _ => await OnPostpone.InvokeAsync(_viewModel.ItemId)">
                        <ion-icon name="caret-down-outline"></ion-icon>
                    </TouchButton>
                </div>

            }
        </div>
        <div class="buttonGroup">
            @if (_viewModel.CanBuyAgain) {
                <TouchButton TouchingClass="pressed" OnPressed="async _ => await OnBuyAgain.InvokeAsync(_viewModel.ItemId)"><ion-icon name="add-outline"></ion-icon>Buy Again</TouchButton>
            }
            <TouchButton TouchingClass="pressed" OnPressed="async _ => await OnDelete.InvokeAsync(_viewModel.ItemId)"><ion-icon name="trash-outline"></ion-icon>Delete</TouchButton>
            <TouchButton TouchingClass="pressed" OnPressed="async _ => await OnEdit.InvokeAsync(_viewModel.ItemId)"><ion-icon name="pencil-outline"></ion-icon>Edit...</TouchButton>
        </div>
    </div>
</ElixDrawer>

@code {
    ElixDrawer _drawer;
    ViewModel _viewModel;

    public async ValueTask Open(ViewModel viewModel) {
        _viewModel = viewModel;
        await InvokeAsync(() => StateHasChanged());
        await _drawer.Open();
    }

    public async ValueTask Close() => await _drawer.Close();

    [Parameter]
    public EventCallback<ItemId> OnComplete { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnDelete { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnBuyAgain { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnEdit { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnPostpone { get; set; }

    [Parameter]
    public EventCallback<(ItemId,int)> OnPostponeDays { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnAddToShoppingListNow { get; set; }

    public void Dispose() => _drawer?.Dispose();
}
