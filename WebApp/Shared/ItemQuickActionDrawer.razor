@implements IDisposable
@using Models 
@using static Models.CoreTypes
@using static Models.ItemQuickActionsModule

<ElixDrawer @ref="_drawer">
    @if (_viewModel == null)
        return;
    <div class="drawer">
        <header>
            <div></div>
            <h1>@_viewModel.ItemName.AsText()</h1>
            <div></div>
        </header>
        <div class="buttonGroup">
            @if (_viewModel.CanComplete) {
                <button ontouchstart="" @onclick="async _ => await OnComplete.InvokeAsync(_viewModel.ItemId)"><ion-icon name="checkmark-outline"></ion-icon>Complete</button>
            }
            @if (_viewModel.CanAddToShoppingListNow) {
                <button ontouchstart="" @onclick="async _ => await OnAddToShoppingListNow.InvokeAsync(_viewModel.ItemId)"><ion-icon name="add-outline"></ion-icon>Add to shopping list now</button>
            }
            @if (_viewModel.CanPostpone) {
                var daysInWeek = 7;
                var estimate = DurationEstimateModule.fromTimeSpan(TimeSpan.FromDays(daysInWeek));
                var description = DurationEstimateModule.longLabel(estimate);
                <div class="buttonRow">
                    <button ontouchstart="" class="splitButtonDefault" @onclick="async _ => await OnPostponeDays.InvokeAsync((_viewModel.ItemId, daysInWeek))"><ion-icon name="calendar-outline"></ion-icon>Postpone @description</button>
                    <button ontouchstart="" class="splitButtonIcon" @onclick="async _ => await OnPostpone.InvokeAsync(_viewModel.ItemId)">
                        <ion-icon name="caret-down-outline"></ion-icon>
                    </button>
                </div>
            }
        </div>
        <div class="buttonGroup">
            <div class="buttonRow">
                <button ontouchstart="" @onclick="async _ => await OnDelete.InvokeAsync(_viewModel.ItemId)" class="justIconButton"><ion-icon name="trash-outline"></ion-icon></button>
                <button ontouchstart="" @onclick="async _ => await OnEdit.InvokeAsync(_viewModel.ItemId)"><ion-icon name="pencil-outline"></ion-icon>Edit...</button>
            </div>
        </div>
    </div>
</ElixDrawer>

@code {
    ElixDrawer _drawer;
    ViewModel _viewModel;

    public async ValueTask Open(ViewModel viewModel) {
        _viewModel = viewModel;
        await InvokeAsync(() => StateHasChanged());
        await _drawer.Open();
    }

    public async ValueTask Close() => await _drawer.Close();

    [Parameter]
    public EventCallback<ItemId> OnComplete { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnDelete { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnBuyAgain { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnEdit { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnPostpone { get; set; }

    [Parameter]
    public EventCallback<(ItemId, int)> OnPostponeDays { get; set; }

    [Parameter]
    public EventCallback<ItemId> OnAddToShoppingListNow { get; set; }

    public void Dispose() => _drawer?.Dispose();
}
