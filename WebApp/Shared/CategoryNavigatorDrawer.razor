@implements IDisposable
@using Models
@using static Models.CoreTypes
@using Common

<style>
    .categoryDrawerButton {
        display: inline-grid;
        grid-column-gap: 2px;
        align-items: center;
        justify-content: flex-start;
        grid-template-columns: auto 1.5em 1.5em;
    }

</style>
<ElixDrawer @ref="_drawer" FromEdge="ElixDrawerEdge.Start">
    @if (_viewModel == null) { return; }
    <div class="plainMenu">
        @foreach (var i in _viewModel) {
            var c = i;
            string description = c.Category.IsSome() ? c.Category.Value.CategoryName.AsText() : "(Uncategorized)";
            <button class="categoryDrawerButton" disabled="@(c.Total==0)" ontouchstart="" @onclick="async _=> await OnSelectCore(c.Category.GetOr(null)?.CategoryId)">
                @*@if (c.Active > 0 || c.Inactive > 0) {
                    <span style="grid-column:2/3" class="badge badge-primary">@c.Active</span>
                }*@
                @*@if (c.Active > 0 || c.Inactive > 0 ) {
                    <span style="grid-column:3/4" class="badge badge-secondary">@c.Inactive</span>
                }*@
                <span style="grid-row:1/2; grid-column:1/2; margin-right:0.25rem">@description</span>
            </button>
        }
        <button class="separatorAbove" style="display:inline-flex; justify-content:flex-start;border-top:1px solid #cecece" ontouchstart="" @onclick="async _=> await OnManageCategoriesCore()">
            <ion-icon name="settings-outline"></ion-icon><span style="margin-left:1em">Manage categories</span>
        </button>
    </div>
</ElixDrawer>
@code {
    private ShoppingListModule.CategorySummary[] _viewModel;
    private ElixDrawer _drawer;

    public async Task Open(IEnumerable<ShoppingListModule.CategorySummary> categories) {
        _viewModel = categories.ToArray();
        await InvokeAsync(() => StateHasChanged());
        await _drawer.Open();
    }

    public void Dispose() => _drawer?.Dispose();

    private async Task OnSelectCore(CategoryId? c) {
        await _drawer.Close();
        await OnSelect.InvokeAsync(c);
    }

    private async Task OnManageCategoriesCore() {
        await _drawer.Close();
        await OnManageCategories.InvokeAsync();
    }

    [Parameter]
    public EventCallback<CategoryId?> OnSelect { get; set; }

    [Parameter]
    public EventCallback OnManageCategories { get; set; }
}
