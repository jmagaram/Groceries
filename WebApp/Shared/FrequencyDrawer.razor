@implements IDisposable
@using Models
@using static Models.CoreTypes
@using static Models.SelectZeroOrOneModule
@using Common

<ElixDrawer @ref="_drawer">
    @if (_model != null) {
    <div class="buttonDrawer">
        <h1>Repeat</h1>
        <button class="drawerButton" ontouchstart="" @onclick="async _ => await Select(null)">
            <div style="display:flex; flex-direction:row; justify-content:space-between">
                <div>No (just once)</div>
                @if (_model.CurrentChoice.IsNone()) {
                    <ion-icon name="checkmark-outline"></ion-icon>
                }
                else {
                    <div>&nbsp;</div>
                }
            </div>
        </button>
        @foreach (var i in _model.Choices.OrderBy(j => j.Item)) {
            bool isSelected = _model.CurrentChoice.IsSomeValue(i);
            <button class="drawerButton" ontouchstart="" @onclick="async _=>await Select(i)">
                <div style="display:flex; flex-direction:row; justify-content:space-between">
                    <div>@i.AsText()</div>
                    @if (isSelected) {
                        <ion-icon name="checkmark-outline"></ion-icon>
                    }
                    else {
                        <div>&nbsp;</div>
                    }
                </div>
            </button>
        }
    </div>
    }
</ElixDrawer>

@code {
    private ElixDrawer _drawer;
    private SelectZeroOrOne<Frequency> _model;

    public void Dispose() => _drawer?.Dispose();

    public async ValueTask Open(SelectZeroOrOne<Frequency> model) {
        _model = model;
        await _drawer.Open();
    }

    public async ValueTask Close() => await _drawer.Close();

    [Parameter]
    public EventCallback<SelectZeroOrOne<Frequency>> OnSelected { get; set; }

    private async Task Select(Frequency f) {
        _model = (f == null) ? _model.SelectNone() : _model.Select(f);
        await _drawer.Close();
        await OnSelected.InvokeAsync(_model);
    }
}
