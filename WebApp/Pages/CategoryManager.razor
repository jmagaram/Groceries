@page "/categories"
@using Models
@using static Models.CoreTypes
@using static Models.ViewTypes
@using static Models.CategoryManager
@using Message = Models.ViewTypes.SetEditWizardMessage
@using Common

@if (Form == null) {
    <p>Loading...</p>
    return;
}
<style>
    ion-icon {
        font-size: 24px;
    }

    .iconButton {
    }

        .iconButton ion-icon {
            display: inline-block;
            vertical-align: bottom;
            height: 1.4em;
            font-size: 1.1em
        }

    ul {
        list-style-type: none;
        padding-left: 0px;
    }

    small {
        display: block;
    }

    .mapper {
        display: inline-grid;
        grid-template-columns: auto min-content auto;
        column-gap: 1em;
        grid-row-gap: 0.5em;
        align-items: center;
    }
</style>
<Modes ActiveIndex="Form.BulkEdit.IsSome() ? 0 : 1">
    <ModesItem>
        @if (Form.BulkEdit.IsSome()) {
            bool hasErrors = Form.Errors.Any();
            var f = Form.BulkEdit?.Value;
            <nav class="navbar navbar-dark bg-dark sticky-top">
                <button class="btn btn-dark iconButton" @onclick="_=>OnCancel()">Cancel</button>
                <span class="navbar-text enterLeft">Categories</span>
                <button disabled="@hasErrors" @onclick="_=>GoNext()" class="btn btn-dark iconButton">Next&nbsp;<ion-icon name="chevron-forward-outline"></ion-icon></button>
            </nav>
            <div class="col">
                <h5 style="margin-top:1rem; margin-bottom:0.5rem">Organize your grocery list</h5>
                <small class="text-secondary">Type each category on a separate line. Order doesn't matter. Suggestions: Dry Goods, Produce, Dairy & Eggs, Frozen, Bakery, Meat and Seafood, Deli & Prepared, Household, and Other.</small>
                <textarea class="form-control" style="width:100%; margin-top:1rem" spellcheck="false" rows=10 @oninput="e=>OnBulkTextEdit((string)e.Value)" @onfocusout="_=>OnFocusOut()" value="@f.Proposed.ValueCommitted">
    </textarea>
                @if (hasErrors) {
                    <ul style="margin-top:1rem" class="alert alert-warning" role="alert">
                        @foreach (var e in Form.Errors) {
                            <li>"@e.Proposed" | @e.Error</li>
                        }
                    </ul>
                }
            </div>  }
    </ModesItem>
    <ModesItem>
        @if (Form.Summary.IsSome()) {
            var f = Form.Summary?.Value;
            var finalList = SetMapChangesFormModule.targets(f).OrderBy(i => i);
            <nav class="navbar navbar-dark bg-dark sticky-top">
                <button class="btn btn-dark iconButton" @onclick="_=> GoBulkEdit()"><ion-icon name="chevron-back-outline" /></button>
                <span class="navbar-text enterLeft">Categories</span>
                <button @onclick="_=>SaveChanges()" class="btn btn-dark iconButton">Save</button>
            </nav>
            <div class="col" style="margin-top:1rem">
                @if (f.MoveOrDelete.Any()) {
                    <h5 style="margin-top:1rem; margin-bottom:0">Deleted categories</h5>
                    <small style="margin-bottom:1rem;display:block">Reassign grocery items that use a deleted category to one of your new ones.</small>
                    <div class="mapper">
                        <strong>Deleted</strong>
                        <span>&nbsp;</span>
                        <strong>New Category</strong>
                        @foreach (var i in f.MoveOrDelete.OrderBy(j => j.Key)) {
                            <span>@i.Key</span>
                            <ion-icon name="arrow-forward-outline"></ion-icon>
                            <select @oninput="e=>Reassign(i.Key,(string)e.Value)">
                                @foreach (var t in finalList) {
                                    <option selected="@(i.Value.IsSomeValue(t))" value="@t">@t</option>
                                }
                                <option selected="@i.Value.IsNone()" value="@NoCategory">(No Category)</option>
                            </select>
                        }
                    </div> }
                else {
                    if (finalList.Any()) {
                        <h5 style="margin-top:1rem">Your categories</h5>
                        @foreach (var t in finalList) {
                            if (f.Create.Contains(t)) {
                                <div>@t <span class="badge badge-secondary">new</span></div>
                            }
                            else {
                                <div>@t</div>
                            }
                        }
                    }
                    else {
                        <h4>Your categories</h4>
                        <div>You haven't chosen any categories. All items on your shopping list will appear in the "Uncategorized" group. It is recommended you create at least a few categories like "Produce" and "Dry Goods" to make your time in the grocery store more efficient.</div>
                    }
                }
            </div>  }
    </ModesItem>
</Modes>

@code {
    [Inject]
    public Service StateService { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        await StateService.InitializeAsync();
        Form = CategoryManagerWizard.FromState(StateService.CurrentState);
    }

    private string NoCategory = "_nocategory_";

    public void OnFocusOut() =>
    Form = Form.Update(Message.NewBulkTextBoxMessage(TextBoxMessage.LoseFocus));

    public void OnBulkTextEdit(string s) =>
        Form = Form.Update(Message.NewBulkTextBoxMessage(TextBoxMessage.NewTypeText(s)));

    public void GoNext() =>
        Form = Form.Update(Message.GoToSummary);

    public void GoBulkEdit() =>
        Form = Form.Update(Message.GoBackToBulkEdit);

    public void Reassign(string x, string y) {
        var message = y.Equals(NoCategory) ? Message.NewDelete(x) : Message.NewMoveRename(x, y);
        Form = Form.Update(message);
    }

    public void OnCancel() => Navigation.NavigateTo("/shoppinglist");

    public async Task SaveChanges() {
        if (Form.HasChanges) {
            var message = Models.StateTypes.StateMessage.NewReorganizeCategoriesMessage(Form.ReorganizeResult);
            await StateService.UpdateAsync(message);
        }
        Navigation.NavigateTo("/shoppinglist");
    }

    public CategoryManagerWizard Form { get; set; }
}
