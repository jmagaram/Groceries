@page "/itemedit"
@using Common
@using Microsoft.FSharp.Core;
@using static Models.ItemEditFormModule

<h1>Edit item</h1>
<form>
    <div>
        <label>
            Name: <input @oninput="OnItemNameChange" @onfocusout="OnItemNameFocusOut" placeholder="Apples, Canned Tuna, ..." value="@Form.ItemName.Value" />
            @if (Form.ItemName.ValidationResult.IsError) {
                <span>Error: @Form.ItemName.ValidationResult.ErrorValue</span>
            }
        </label>
    </div>
    <div>
        <label>
            Quantity: <input @oninput="OnQuantityChange" @onfocusout="OnQuantityFocusOut" placeholder="3, Lots!, 2 lb., 1 jar, ..." value="@Form.Quantity.Value" />
            @if (Form.Quantity.ValidationResult.IsError) {
                <span>Error: @Form.Quantity.ValidationResult.ErrorValue</span>
            }
        </label>
    </div>
    <div>
        <label>
            Note: <textarea rows="3" @oninput="OnNoteChange" @onfocusout="OnNoteFocusOut" placeholder="Favorite brand, extra firm only..." value="@Form.Note.Value" />
            @if (Form.Note.ValidationResult.IsError) {
                <span>Error: @Form.Note.ValidationResult.ErrorValue</span>
            }
        </label>
    </div>
    <div>
        <label>
            Repeat:
            <select @onchange="OnRepeatChange">
                @{
                    int repeatInterval = Form.Schedule switch
                    {
                        RelativeSchedule.Repeat r => r.Item.Interval,
                        _ => -1
                    };
                }
                <option selected="@repeatInterval == -1" value="-1">Only once</option>
                @foreach (var i in Form.RepeatIntervalChoices) {
                    string description = Form.RepeatIntervalAsText(i);
                    string key = i.ToString();
                    bool isSelected = i == repeatInterval;
                    <option selected="@isSelected" value="@key">@description</option>
                }
            </select>
        </label>
    </div>
    @if (Form.Schedule.IsRepeat) {
        <div>
            <label>
                Postpone:
                <select @onchange="OnPostponeChange">
                    @foreach (var i in Form.PostponeChoices()) {
                        string description = Form.PostponeDurationAsText(i);
                        string key = i.ToString();
                        var pd = Form.PostponeDuration;
                        bool isSelected = pd.IsSome() && pd.Value.Equals(i);
                        <option selected="@isSelected" value="@key"><text>+</text>@description</option>
                    }
                    <option selected="@Form.PostponeDuration.IsNone()" value="@notPostponed">On shopping list now</option>
                    }
                </select>
            </label>
        </div>
    }
    <div>
        <label>
            Category:
            <select @onchange="OnExistingCategoryChange">
                <option selected="@(Form.CategoryPicker.Mode.IsExistingOrUncategorizedMode && Form.CategoryPicker.ExistingOrUncategorized.Selected.IsNone())" value="@chooseUncategorized">Uncategorized</option>
                @foreach (var i in Form.CategoryPicker.ExistingOrUncategorized.Choices) {
                    string description = i.CategoryName.Item;
                    string key = i.CategoryId.Item.ToString();
                    bool isSelected = Form.CategoryPicker.Mode.IsExistingOrUncategorizedMode && Form.CategoryPicker.ExistingOrUncategorized.Selected.IsSomeValue(i);
                    <option selected="@isSelected" value="@key">@description</option>
                }
                <option selected="@Form.CategoryPicker.Mode.IsCreateNewMode" value="@chooseCreateNewCategory">New category...</option>
                }
            </select>
        </label>
        @if (Form.CategoryPicker.Mode.IsCreateNewMode) {
            var i = Form.CategoryPicker.CreateNewCategory;
            <div>
                <input value="@i.Value" @oninput="OnNewCategoryNameChange" @onfocusout="OnNewCategoryNameFocusOut" placeholder="Category name" />
                @if (i.ValidationResult.IsError) {
                    <span>Error: @i.ValidationResult.ErrorValue</span>
                }
            </div>
        }
    </div>
    <div>
        Stores:<br />
        @foreach (var st in Form.Stores.OrderBy(i => i.Store.StoreName)) {
            var id = st.Store.StoreId;
            var name = st.Store.StoreName.Item;
            <div>
                <label>
                    <input type="checkbox" @oninput="e => OnStoreChange(e, st.Store.StoreId)" id="@id" name="@id" checked="@st.IsSold">&nbsp;@name
                </label>
            </div>
        }
        @{
            var summary = Form.StoreSummary();
            if (summary is Models.ItemEditFormModule.StoreAvailabilitySummary.SoldEverywhereExcept everywhereExcept) {
                <p>Sold everywhere EXCEPT @everywhereExcept.Item.StoreName.Item</p>
            }
            else if (summary is Models.ItemEditFormModule.StoreAvailabilitySummary.SoldOnlyAt onlyAt) {
                <p>Sold ONLY at @onlyAt.Item.StoreName.Item</p>
            }
            else if (summary.IsNotSoldAnywhere) {
                <p>Not sold anywhere!</p>
            }
            else if (summary.IsSoldEverywhere) {
                <p>Sold everywhere</p>
            }
            else if (summary.IsVariedAvailability) {
                <p>Varied availability</p>
            }
            else {
                throw new NotImplementedException("Did not handle a store summary");
            }
        }
    </div>
    @*<button type="button" @onclick="e=>OnSubmit.InvokeAsync(null)" disabled="@(!_view.Commands.Contains(DomainTypes.ItemEditCommand.Submit))">Save</button>*@

</form>
