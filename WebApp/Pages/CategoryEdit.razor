@page "/categoryedit"
@page "/categoryedit/{ID:guid}"

@using Microsoft.FSharp.Core;
@using Models
@using static Common.OptionExtensions;
@using static Models.CategoryForm
<style>
    .nav-pills li {
        margin-right: 5px;
    }
</style>

@if (Form.Mode.IsCreateCategoryMode) {
    <h3>New category</h3>
}
else {
    <h3>Edit category</h3>
}

<form>
    <div class="form-group">
        <label for="categoryNameInput">Category name</label>
        <input id="categoryNameInput" class="form-control" @oninput="OnNameChange" @onfocusout="OnNameFocusOut" value="@Form.CategoryName" />
        @if (Form.CategoryNameValidation.IsError) {
            <small class="form-text text-danger">
                @Form.CategoryNameValidation.ErrorValue
            </small>
        }
    </div>

    <ul class="nav nav-pills">
        @if (Form.Mode.IsEditCategoryMode) {
            <li>
                <button class="btn btn-secondary" type="button" @onclick="e=>OnDelete()"><span class="oi oi-trash" aria-hidden="true"></span></button>
            </li>
        }
        <li>
            <button class="btn btn-primary" type="button" @onclick="OnSubmit" disabled="@(Form.HasErrors)">Submit</button>
        </li>
    </ul>
</form>

@code {

    protected override void OnInitialized() {
        if (Id.HasValue) {
            Form = CategoryForm.editExistingFromGuid(Id.Value, StateService.Current);
        }
        else {
            Form = CategoryForm.createNew;
        }
    }

    [Inject]
    public Data.ApplicationStateService StateService { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Parameter]
    public Guid? Id { get; set; }

    protected Form Form { get; set; }

    private void Process(CategoryFormMessage msg) {
        Form = handle(msg, Form);
    }

    protected void OnNameChange(ChangeEventArgs e) =>
        Process(CategoryFormMessage.NewCategoryNameSet((string)e.Value));


    protected void OnNameFocusOut(FocusEventArgs e) =>
        Process(CategoryFormMessage.CategoryNameBlur);

    protected void OnDelete() {
        var msg = StateTypes.StateMessage.NewCategoryMessage(StateTypes.CategoryMessage.NewDeleteCategory(Form.CategoryId.Value));
        StateService.Update(msg);
        Navigation.NavigateTo("shoppinglist");
    }

    protected void OnSubmit() {
        var msg = StateTypes.StateMessage.NewSubmitCategoryForm(Form.CategoryFormResult());
        StateService.Update(msg);
        Navigation.NavigateTo("shoppinglist");
    }
}
