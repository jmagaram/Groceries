@page "/storeedit"
@page "/storeedit/{ID}"
@implements IDisposable
@using System.Reactive.Linq;
@using Data;
@using Models;
@using static Common.OptionExtensions;
@using static Models.StoreEditFormModule.StoreEditFormExtensions;
@using FormMessage = Models.StoreEditFormModule.Message;
@using PageMessage = Models.StateTypes.StoreEditPageMessage;
@using StateMessage = Models.StateTypes.StateMessage;
@using TextBoxMessage = Models.CoreTypes.TextBoxMessage;

<style>
    .nav-pills li {
        margin-right: 5px;
    }
</style>

@if (Form.Mode().IsCreateNewStoreMode) {
    <h3>New store</h3>
}
else {
    <h3>Edit store</h3>
}

<form>
    <div class="form-group">
        <label for="storeNameInput">Store name</label>
        <input id="storeNameInput" class="form-control" @oninput="OnNameChange" @onfocusout="OnNameFocusOut" value="@Form.StoreName.ValueCommitted" />
        @if (Form.StoreNameErrors().IsSome()) {
            <small class="form-text text-danger">
                @Form.StoreNameErrors().Value
            </small>
        }
    </div>

    <ul class="nav nav-pills">
        @if (Form.Mode().IsEditExistingStoreMode) {
            <li>
                <button class="btn btn-secondary" type="button" @onclick="e=>OnDelete()"><span class="oi oi-trash" aria-hidden="true"></span></button>
            </li>
        }
        <li>
            <button class="btn btn-primary" type="button" @onclick="OnSubmit" disabled="@(Form.HasErrors())">Submit</button>
        </li>
    </ul>
</form>

@code {
    IDisposable _subscription = null;

    public void Dispose() => _subscription?.Dispose();

    protected override void OnInitialized() {
        _subscription = StateService.StoreEditPage.Subscribe(i => Form = i);
        if (!string.IsNullOrWhiteSpace(Id)) {
            var pageMessage = PageMessage.NewBeginEditStore(Id);
            var stateMessage = StateMessage.NewStoreEditPageMessage(pageMessage);
            StateService.Update(stateMessage);
        }
        else {
            var pageMessage = PageMessage.BeginCreateNewStore;
            var stateMessage = StateMessage.NewStoreEditPageMessage(pageMessage);
            StateService.Update(stateMessage);
        }
    }

    [Inject]
    public ApplicationStateService StateService { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected CoreTypes.StoreEditForm Form { get; set; }

    protected void OnNameChange(ChangeEventArgs e) {
        var textBoxMessage = TextBoxMessage.NewTypeText((string)e.Value);
        var formMessage = FormMessage.NewStoreNameMessage(textBoxMessage);
        var pageMessage = PageMessage.NewStoreEditFormMessage(formMessage);
        var stateMessage = StateMessage.NewStoreEditPageMessage(pageMessage);
        StateService.Update(stateMessage);
    }

    protected void OnNameFocusOut(FocusEventArgs e) {
        var textBoxMessage = TextBoxMessage.LoseFocus;
        var formMessage = StoreEditFormModule.Message.NewStoreNameMessage(textBoxMessage);
        var pageMessage = PageMessage.NewStoreEditFormMessage(formMessage);
        var stateMessage = StateMessage.NewStoreEditPageMessage(pageMessage);
        StateService.Update(stateMessage);
    }

    protected void OnDelete() {
        var pageMessage = PageMessage.DeleteStore;
        var stateMessage = StateMessage.NewStoreEditPageMessage(pageMessage);
        StateService.Update(stateMessage);
        Navigation.NavigateTo("shoppinglist");
    }

    protected void OnSubmit() {
        var pageMessage = PageMessage.SubmitStoreEditForm;
        var stateMessage = StateMessage.NewStoreEditPageMessage(pageMessage);
        StateService.Update(stateMessage);
        Navigation.NavigateTo("shoppinglist");
    }

    protected void OnCancel() {
        var pageMessage = PageMessage.CancelStoreEditForm;
        var stateMessage = StateMessage.NewStoreEditPageMessage(pageMessage);
        StateService.Update(stateMessage);
        Navigation.NavigateTo("shoppinglist");
    }
}
