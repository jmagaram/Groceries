@page "/categoryedit"
@page "/categoryedit/{ID}"
@implements IDisposable
@using System.Reactive.Linq;
@using Data;
@using Models
@using static Common.OptionExtensions;
@using static Models.CategoryEditFormModule.CategoryEditFormExtensions;
@using FormMessage = Models.CategoryEditFormModule.Message;
@using PageMessage = Models.StateTypes.CategoryEditPageMessage;
@using StateMessage = Models.StateTypes.StateMessage;
@using TextBoxMessage = Models.CoreTypes.TextBoxMessage;

<style>
    .nav-pills li {
        margin-right: 5px;
    }
</style>

@if (Form != null) {
    @if (Form.Mode().IsCreateNewCategoryMode) {
        <h3>New category</h3>
    }
    else {
        <h3>Edit category</h3>
    }
    <form>
        <div class="form-group">
            <label for="categoryNameInput">Category name</label>
            <input id="categoryNameInput" class="form-control" @oninput="OnNameChange" @onfocusout="OnNameFocusOut" value="@Form.CategoryName.ValueCommitted" />
            @if (Form.CategoryNameErrors().IsSome()) {
                <small class="form-text text-danger">
                    @Form.CategoryNameErrors().Value
                </small>
            }
        </div>

        <ul class="nav nav-pills">
            @if (Form.Mode().IsEditExistingCategoryMode) {
                <li>
                    <button class="btn btn-secondary" type="button" @onclick="OnDelete"><span class="oi oi-trash" aria-hidden="true"></span></button>
                </li>
            }
            <li>
                <button class="btn btn-primary" type="button" @onclick="OnSubmit" disabled="@(Form.HasErrors())">Submit</button>
            </li>
        </ul>
    </form>
}
else {
    <p>Loading...</p>
}

@code {
    IDisposable _subscription = null;

    public void Dispose() => _subscription?.Dispose();

    protected override async Task OnInitializedAsync() {
        _subscription =
            StateService.State
            .Select(i => i.CategoryEditPage)
            .Where(i => i.IsSome())
            .Select(i => i.Value)
            .DistinctUntilChanged()
            .Subscribe(i => Form = i);

        if (!string.IsNullOrWhiteSpace(Id)) {
            var pageMessage = PageMessage.NewBeginEditCategory(Id);
            var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
            await StateService.UpdateAsync(stateMessage);
        }
        else {
            var pageMessage = PageMessage.BeginCreateNewCategory;
            var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
            await StateService.UpdateAsync(stateMessage);
        }
    }

    [Inject]
    public Models.Service StateService { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected CoreTypes.CategoryEditForm Form { get; set; }

    protected async Task OnNameChange(ChangeEventArgs e) {
        var textBoxMessage = TextBoxMessage.NewTypeText((string)e.Value);
        var formMessage = FormMessage.NewCategoryNameMessage(textBoxMessage);
        var pageMessage = PageMessage.NewCategoryEditFormMessage(formMessage);
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        await StateService.UpdateAsync(stateMessage);
    }

    protected async Task OnNameFocusOut(FocusEventArgs e) {
        var textBoxMessage = TextBoxMessage.LoseFocus;
        var formMessage = FormMessage.NewCategoryNameMessage(textBoxMessage);
        var pageMessage = PageMessage.NewCategoryEditFormMessage(formMessage);
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        await StateService.UpdateAsync(stateMessage);
    }

    protected async Task OnDelete(MouseEventArgs e) {
        var pageMessage = PageMessage.DeleteCategory;
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        Dispose();
        Navigation.NavigateTo("shoppinglist");
        await StateService.UpdateAsync(stateMessage);
    }

    protected async Task OnSubmit(MouseEventArgs e) {
        var pageMessage = PageMessage.SubmitCategoryEditForm;
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        Dispose();
        Navigation.NavigateTo ("shoppinglist");
        await StateService.UpdateAsync(stateMessage);
    }
}
