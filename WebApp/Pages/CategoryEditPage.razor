@page "/categoryedit"
@page "/categoryedit/{ID}"
@implements IDisposable
@using System.Reactive.Linq;
@using Models
@using static Common.OptionExtensions;
@using static Models.CategoryEditFormModule.CategoryEditFormExtensions;
@using FormMessage = Models.CategoryEditFormModule.Message;
@using PageMessage = Models.StateTypes.CategoryEditPageMessage;
@using StateMessage = Models.StateTypes.StateMessage;
@using TextBoxMessage = Models.CoreTypes.TextBoxMessage;

@if (Form != null) {
    string pageTitle = Form.Mode().IsCreateNewCategoryMode ? "New category" : "Edit category";
    string categoryNameClass = Form.CategoryNameErrors().IsSome() ? "is-invalid" : "";
    <form onsubmit="return false;">
        <nav class="navbar navbar-dark bg-dark sticky-top">
            <span class="navbar-text">@pageTitle</span>
            <div class="form-inline">
                <div role="group">
                    @if (Form.Mode().IsEditExistingCategoryMode) {
                        <button style="margin-right:5px" type="button" class="btn btn-secondary" @onclick="OnDelete"><Icon Kind="IconKind.Trash" /></button>
                    }
                    @*Hidden submit button because Enter is causing the form to get submitted without first causing the name field to lose focus. Can't get it to work properly.*@
                    <button type="submit" hidden disabled />
                    <button type="button" class="btn btn-primary"
                            @onclick="OnSubmit"
                            disabled="@(Form.HasErrors())">
                        Done
                    </button>
                </div>
            </div>
        </nav>
        <div class="col" style="width:40ch">
            <div class="form-group">
                <label for="inputCategoryName" class="col-form-label">Category name</label>
                <div>
                    <input type="text" class="form-control @categoryNameClass" id="inputCategoryName" @oninput="OnNameChange" @onfocusout="OnNameFocusOut" value="@Form.CategoryName.ValueCommitted">
                    @if (Form.CategoryNameErrors().IsSome()) {
                        <div class="invalid-feedback">@Form.CategoryNameErrors().Value</div>
                    }
                </div>
            </div>
        </div>
    </form>}
else {
    <p>Loading...</p>
}

@code {
    private IDisposable _subscription = null;

    protected override async Task OnInitializedAsync() {
        _subscription =
            StateService.State
            .Select(i => i.CategoryEditPage)
            .Where(i => i.IsSome())
            .Select(i => i.Value)
            .DistinctUntilChanged()
            .Subscribe(i => Form = i);

        if (!string.IsNullOrWhiteSpace(Id)) {
            var pageMessage = PageMessage.NewBeginEditCategory(Id);
            var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
            await StateService.UpdateAsync(stateMessage);
        }
        else {
            var pageMessage = PageMessage.BeginCreateNewCategory;
            var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
            await StateService.UpdateAsync(stateMessage);
        }
    }

    [Inject]
    public Models.Service StateService { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected CoreTypes.CategoryEditForm Form { get; set; }

    protected async Task OnNameChange(ChangeEventArgs e) {
        var textBoxMessage = TextBoxMessage.NewTypeText((string)e.Value);
        var formMessage = FormMessage.NewCategoryNameMessage(textBoxMessage);
        var pageMessage = PageMessage.NewCategoryEditFormMessage(formMessage);
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        await StateService.UpdateAsync(stateMessage);
    }

    protected async Task OnNameFocusOut(FocusEventArgs e) {
        var textBoxMessage = TextBoxMessage.LoseFocus;
        var formMessage = FormMessage.NewCategoryNameMessage(textBoxMessage);
        var pageMessage = PageMessage.NewCategoryEditFormMessage(formMessage);
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        await StateService.UpdateAsync(stateMessage);
    }

    protected async Task OnDelete(MouseEventArgs e) {
        Dispose();
        var pageMessage = PageMessage.DeleteCategory;
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        await StateService.UpdateAsync(stateMessage);
        Navigation.NavigateTo("shoppinglist");
    }

    protected async Task OnSubmit(MouseEventArgs e) {
        Dispose();
        var pageMessage = PageMessage.SubmitCategoryEditForm;
        var stateMessage = StateMessage.NewCategoryEditPageMessage(pageMessage);
        await StateService.UpdateAsync(stateMessage);
        Navigation.NavigateTo("shoppinglist");
    }

    public void Dispose() => _subscription?.Dispose();
}
