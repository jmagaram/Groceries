@page "/editstore"
@page "/editstore/{ID:guid}"

@using Microsoft.FSharp.Core;
@using Models
@using static Common.OptionExtensions;
@using static Models.StoreForm
<style>
    .nav-pills li {
        margin-right: 5px;
    }
</style>

@if (Form.Mode.IsCreateStoreMode) {
    <h4>New store</h4>
}
else {
    <h4>Edit store</h4>
}
<form>
    <div class="form-group">
        <label for="storeNameInput">Store name</label>
        <input id="storeNameInput" @oninput="OnNameChange" @onfocusout="OnNameFocusOut" value="@Form.StoreName" />
        @if (Form.StoreNameValidation.IsError) {
            <small class="form-text text-danger">@Form.StoreNameValidation.ErrorValue</small>
        }
    </div>
    <ul class="nav nav-pills">
        @if (Form.Mode.IsEditStoreMode) {
            <li>
                <button class="btn btn-secondary" type="button" @onclick="e=>OnDelete()"><span class="oi oi-trash" aria-hidden="true"></span></button>
            </li>
        }
        <li>
            <button class="btn btn-primary" type="button" @onclick="OnSubmit" disabled="@(Form.HasErrors)">Submit</button>
        </li>
    </ul>
</form>

@code {

    protected override void OnInitialized() {
        if (Id.HasValue) {
            Form = StoreForm.editExistingFromGuid(Id.Value, StateService.Current);
        }
        else {
            Form = StoreForm.createNew;
        }
    }

    [Inject]
    public Data.ApplicationStateService StateService { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Parameter]
    public Guid? Id { get; set; }

    protected Form Form { get; set; }

    private void Process(StoreFormMessage msg) {
        Form = handle(msg, Form);
    }

    protected void OnNameChange(ChangeEventArgs e) =>
        Process(StoreFormMessage.NewStoreNameSet((string)e.Value));


    protected void OnNameFocusOut(FocusEventArgs e) =>
        Process(StoreFormMessage.StoreNameBlur);

    protected void OnDelete() {
        var msg = StateTypes.StateMessage.NewStoreMessage(StateTypes.StoreMessage.NewDeleteStore(Form.StoreId.Value));
        StateService.Update(msg);
        Navigation.NavigateTo("shoppinglist");
    }

    protected void OnSubmit() {
        var msg = StateTypes.StateMessage.NewSubmitStoreForm(Form.StoreFormResult());
        StateService.Update(msg);
        Navigation.NavigateTo("shoppinglist");
    }
}
