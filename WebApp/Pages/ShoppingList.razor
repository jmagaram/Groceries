@page "/shoppinglist"
@using Models
@using Common
@using Microsoft.FSharp.Core;

<div style="margin-bottom:20px">
    <div class="dropdown btn-group">
        @{
            var currentStoreName = StoreFilterChoices.FirstOrDefault(i => i.StoreId.Item == StoreFilter)?.StoreName.Item ?? "All Stores";
        }
        <button class="btn btn-outline-dark btn-lg dropdown-toggle" style="font-weight:bold" type="button" id="storeDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @currentStoreName
        </button>
        <div class="dropdown-menu" aria-labelledby="storeDropdown">
            <a class="dropdown-item" href="#" @onclick="e=>OnStoreFilterClear()" @onclick:preventDefault>All Stores</a>
            <div class="dropdown-divider"></div>
            @foreach (var s in StoreFilterChoices) {
                string description = s.StoreName.Item;
                <a class="dropdown-item" href="#" @onclick="e=>OnStoreFilter(s.StoreId)" @onclick:preventDefault>@description</a>
            }
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="editstore">New store...</a>
            @if (StoreFilter != Guid.Empty) {
                <a class="dropdown-item" href="editstore/@StoreFilter">Edit @currentStoreName...</a>
            }
        </div>
    </div>
    <div style="margin-left:8px" class="dropdown btn-group">
        <button class="btn btn-outline-dark btn-sm dropdown-toggle" type="button" id="viewDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            View
        </button>
        <div class="dropdown-menu" aria-labelledby="viewDropdown">
            <h6 class="dropdown-header">POSTPONED ITEMS</h6>
            <button @onclick="_=>ShowPostponedWithinNext(0)" class="dropdown-item">Overdue only</button>
            <button @onclick="_=>ShowPostponedWithinNext(3)" class="dropdown-item">Next few days</button>
            <button @onclick="_=>ShowPostponedWithinNext(7)" class="dropdown-item">+1 week</button>
            <button @onclick="_=>ShowPostponedWithinNext(14)" class="dropdown-item">+2 weeks</button>
            <button @onclick="_=>ShowPostponedWithinNext(int.MaxValue)" class="dropdown-item">All</button>
            <div class="dropdown-divider"></div>
            <h6 class="dropdown-header">COMPLETED ITEMS</h6>
            <button @onclick="_=>OnClickShowCompletedItems()" class="dropdown-item">Show completed</button>
            <button @onclick="_=>OnClickHideCompletedItems()" class="dropdown-item">Hide completed</button>
        </div>
    </div>
</div>
@if (Items.Count > 0) {
    foreach (var cat in Items.Select(j => j.Category).Distinct().OrderBy(i => i)) {
        var now = DateTimeOffset.Now;
        var categoryName = cat.IsNone() ? "(Uncategorized)" : cat.Value.CategoryName.Item;
        <div>
            @if (cat.IsSome()) {
                <h4 @onclick="e=>OnNavigateToCategory(cat.Value.CategoryId)" style="display:inline-block; cursor:pointer">
                    @categoryName
                </h4>
            }
            else {
                <h4 style="display:inline-block">
                    @categoryName
                </h4>
            }
        </div>

        foreach (var item in Items.Where(i => object.Equals(i.Category, cat)).OrderBy(j => ScheduleModule.due(now, j.Schedule)).ThenBy(j => j.ItemName)) {
            <WebApp.Shared.Item HideCategory="true" OnClickPostpone="OnClickPostpone" OnClickRemovePostpone="OnClickRemovePostpone" OnClickBuyAgain="OnClickBuyAgain" OnClickDelete="OnClickDelete" OnClickComplete="OnClickComplete" ItemQry="@item" />
        }
    }
}
else {
    if (TextFilter.Length > 0) {
        <p>Couldn't find anything like that, but it sounds tasty!</p>
    }
    else {
        <p>No shopping list items.</p>
    }
}
<form class="form-inline" style="position: fixed; bottom: 10px; right: 10px">
        <label for="textFilter"></label>
        <input autocomplete="off" type="text" id="textFilter" class="form-control" style="max-width:200px" value="@TextFilter" placeholder="Find or add" @oninput="OnTextFilterChange" @onkeydown="OnTextFilterKeyDown" @onfocusout="OnTextFilterBlur" />
        @if (TextFilter.Length > 0) {
            <button type="button" class="btn btn-link" style="margin-left:1px" @onclick="OnTextFilterClear"><span class="oi oi-x" aria-hidden="true"></span></button>
        }
        <a style="margin-left:8px" class="btn btn-primary" href="itemnew/@TextFilter">Go</a>
</form>
