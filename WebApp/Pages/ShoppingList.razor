@page "/shoppinglist"
@using Models
@using Common
@using Microsoft.FSharp.Core;
@using WebApp.Shared;
@using static Models.ScheduleModule.ScheduleExtensions;

<style>
    .categoryHeader {
        margin-top: 1.0rem;
        margin-bottom: 0.4rem;
        cursor: pointer;
        max-width: 250px;
    }

    .filterRow {
        animation-duration: 0.2s;
        animation-name: slidein;
        animation-timing-function: ease-out;
        width: 30ch;
    }

    .filterInput {
        width: 20ch;
        font-size: larger;
    }

    @@keyframes slidein {
        from {
            margin-left: 60%;
            width: 1ch;
        }

        to {
            margin-left: 0%;
            width: 30ch;
        }
    }
</style>
<nav class="navbar navbar-dark bg-dark sticky-top">
    @if (ShowFilter) {
        <div style="display:flex; flex-direction:row" class="filterRow">
            <input @ref="filterTextInput" autocomplete="off" type="text" id="textFilter" class="form-control form-control-sm filterInput" @onkeydown="@(async e => await OnTextFilterKeyDown(e))" @bind-value="@TextFilter" @bind-value:event="oninput" placeholder="Find or add" @onfocusout="OnTextFilterBlur" />
            <button type="button" class="btn btn-link btn-sm" style="position: relative; right: 4ch" @onclick="HideTextFilter">
                <Icon Kind="IconKind.Cancel" />
            </button>
            @if (TextFilter.Length > 0) {
                <button style="margin-left:-3ch" @onclick="OnStartCreateNew" @onclick:stopPropagation @onclick:preventDefault class="btn btn-sm btn-primary">Add</button>
            }
        </div>
    }
    else {
        <div class="col nav col-auto">
            @{
                var currentStoreName = StoreFilterChoices.FirstOrDefault(i => i.StoreId.Item == StoreFilter)?.StoreName.Item ?? "All Stores";
            }
            <div class="nav-item">
                <button class="btn btn-sm btn-primary dropdown-toggle nav-item" type="button" id="storeDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @currentStoreName
                </button>
                <div class="dropdown-menu nav-item" aria-labelledby="storeDropdown">
                    <button class="dropdown-item btn-sm" @onclick="async e=>await OnStoreFilterClear()">All Stores</button>
                    <div class="dropdown-divider"></div>
                    @foreach (var s in StoreFilterChoices) {
                        string description = s.StoreName.Item;
                        <button class="dropdown-item btn-small" href="#" @onclick="async e=>await OnStoreFilter(s.StoreId)">@description</button>
                    }
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item btn-small" href="storeedit">New store...</a>
                    @if (StoreFilter != Guid.Empty) {
                        var storeId = StoreFilter.ToString(); // use StoreId serialize and deserialize instead
                        <a class="dropdown-item" href="storeEdit/@storeId">Edit @currentStoreName...</a>
                    }
                </div>
            </div>
            @if (TextFilter.Length == 0) {
                <div class="nav-item">
                    <button class="btn btn-sm btn-secondary dropdown-toggle nav-item" style="margin-left:5px" type="button" id="viewDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        View
                    </button>
                    <div class="dropdown-menu nav-item" aria-labelledby="viewDropdown">
                        <h6 class="dropdown-header">POSTPONED ITEMS</h6>
                        <button @onclick="async _=>await ShowPostponedWithinNext(0)" class="dropdown-item">Overdue only</button>
                        <button @onclick="async _=>await ShowPostponedWithinNext(3)" class="dropdown-item">Next few days</button>
                        <button @onclick="async _=>await ShowPostponedWithinNext(7)" class="dropdown-item">+1 week</button>
                        <button @onclick="async _=>await ShowPostponedWithinNext(14)" class="dropdown-item">+2 weeks</button>
                        <button @onclick="async _=>await ShowPostponedWithinNext(int.MaxValue)" class="dropdown-item">All</button>
                        <div class="dropdown-divider"></div>
                        <h6 class="dropdown-header">COMPLETED ITEMS</h6>
                        <button @onclick="async _=>await OnClickShowCompletedItems()" class="dropdown-item">Show completed</button>
                        <button @onclick="async _=>await OnClickHideCompletedItems()" class="dropdown-item">Hide completed</button>
                    </div>
                </div>
                if (SyncStatus.IsHasChanges) {
                    <div class="nav-item">
                        <button style="margin-left:5px" @onclick="@OnClickSync" class="btn btn-sm btn-warning nav-item" type="button">
                            <Icon Kind="IconKind.CloudUpload" />&nbsp;Sync
                        </button>
                    </div>
                }
                else if (SyncStatus.IsSynchronizing) {
                    <button style="margin-left:5px" disabled class="btn btn-sm btn-success nav-item" type="button">
                        <Icon Kind="IconKind.CloudUpload" />&nbsp;Syncing...
                    </button>
                }
                else if (SyncStatus.IsNoChanges) {
                    <button style="margin-left:5px" @onclick="@OnClickSync" class="btn btn-sm btn-secondary nav-item" type="button">
                        <Icon Kind="IconKind.CloudUpload" />&nbsp;
                    </button>
                }
            }
        </div>
        <form class="col col-auto form-inline" style="padding-right:0px">
            <label for="textFilter"></label>
        </form>
        <button class="btn btn-sm btn-secondary" @onclick="ShowTextFilter"><Icon Kind="IconKind.Search" />&nbsp;Add</button>
    }
</nav>
<div class="col">
    @if (Items.Count > 0) {
        foreach (var cat in Items.Select(j => j.Category).Distinct().OrderBy(i => i.IsSome() ? i.Value.CategoryName.Item : "")) {
            var now = DateTimeOffset.Now;
            var categoryName = cat.IsNone() ? "(Uncategorized)" : cat.Value.CategoryName.Item;
            @if (cat.IsSome()) {
                <p @onclick="e=>OnNavigateToCategory(cat.Value.CategoryId)" class="categoryHeader">
                    @categoryName
                </p>
            }
            else {
                <p class="categoryHeader" style="cursor:inherit">
                    @categoryName
                </p>
            }

            foreach (var item in Items.Where(i => object.Equals(i.Category, cat)).OrderBy(j => j.Schedule.DueDate(now).GetOr(DateTimeOffset.MaxValue)).ThenBy(j => j.ItemName)) {
                <WebApp.Shared.Item HideCategory="true" OnClickPostpone="@(async i => await OnClickPostpone(i))" OnClickRemovePostpone="@(async i => await OnClickRemovePostpone(i))" OnClickBuyAgain="@(async i => await OnClickBuyAgain(i))" OnClickDelete="OnClickDelete" OnClickComplete="OnClickComplete" ItemQry="@item" />
            }
        }
    }
    else {
        if (TextFilter.Length > 0) {
            <p>Couldn't find anything like that, but it sounds tasty!</p>
        }
        else {
            <p>No shopping list items.</p>
        }
    }
</div>