@page "/shoppinglist"
@using Models
@using Common
@using Microsoft.FSharp.Core;
@using WebApp.Shared;
@using static Models.ScheduleModule.ScheduleExtensions;
@using System.Reactive.Linq;

<style>
    .categoryHeader {
        margin-top: 1.0rem;
        margin-bottom: 0.4rem;
        cursor: pointer;
        max-width: 250px;
    }

    .filterRow {
        animation-duration: 0.2s;
        animation-name: slidein;
        animation-timing-function: ease-out;
        width: 30ch;
    }

    .filterInput {
        width: 20ch;
        font-size: larger;
    }

    @@keyframes slidein {
        from {
            margin-left: 60%;
            width: 1ch;
        }

        to {
            margin-left: 0%;
            width: 30ch;
        }
    }
</style>
<nav class="navbar navbar-dark bg-dark sticky-top">
    @if (ShowFilter) {
        <div style="display:flex; flex-direction:row" class="filterRow">
            <input @ref="filterTextInput" autocomplete="off" type="text" id="textFilter" class="form-control form-control-sm filterInput" @onkeydown="@(async e => await OnTextFilterKeyDown(e))" @bind-value="@TextFilter" @bind-value:event="oninput" placeholder="Find or add" @onfocusout="OnTextFilterBlur" />
            <button type="button" class="btn btn-link btn-sm" style="position: relative; right: 4ch" @onclick="HideTextFilter">
                <Icon Kind="IconKind.Cancel" />
            </button>
            @if (TextFilter.Length > 0) {
                <button style="margin-left:-3ch" @onclick="OnStartCreateNew" @onclick:stopPropagation @onclick:preventDefault class="btn btn-sm btn-primary">Add</button>
            }
        </div>
    }
    else {
<div class="col nav col-auto">
    @{
        var currentStoreName = StoreFilterChoices.FirstOrDefault(i => i.StoreId.Item == StoreFilter)?.StoreName.Item ?? "All Stores";
    }
    <a class="btn btn-sm btn-secondary" style="align-self:center; margin-right:0.7rem" href="\"><Icon Kind="IconKind.GoBack" /></a>
    <div class="nav-item">
        <ElixMenuButton SourcePartType="div" OnMenuItemSelected="@OnMenuItemSelected">
            <Content>
                <elix-menu-item disabled><strong>Plan</strong></elix-menu-item>
                <elix-menu-item id="plan7">Next 7 days</elix-menu-item>
                <elix-menu-item id="plan14">Next 2 weeks</elix-menu-item>
                <elix-menu-item id="planfuture">All future purchases</elix-menu-item>
                <elix-menu-separator></elix-menu-separator>
                <elix-menu-item disabled><strong>Shop</strong></elix-menu-item>
                <elix-menu-item id="shopall">All Stores</elix-menu-item>
                @foreach (var s in StoreFilterChoices) {
                    string id = $"s{Models.StoreIdModule.serialize(s.StoreId)}";
                    <elix-menu-item id="@id">@s.StoreName.Item</elix-menu-item>
                }
                <div slot="source" style="display:flex; flex-direction:column;">
                    <Observable Source="StateService.State.Select(i=>DataRow.current(i.ShoppingListSettings).Value)" Context="i">
                        <Loaded>
                            @{
                                string superTitle = null;
                                string title = null;
                                if (i.HideCompletedItems) {
                                    superTitle = "Shop";
                                    title =
                                        i.StoreFilter.IsSome()
                                        ? StoreFilterChoices.FirstOrDefault(j => j.StoreId.Equals(i.StoreFilter.Value)).StoreName.Item
                                        : "All Stores";
                                }
                                else {
                                    superTitle = "Plan";
                                    title =
                                        (i.PostponedViewHorizon == 14) ? "Next 2 weeks"
                                        : (i.PostponedViewHorizon == 7) ? "Next 7 days"
                                        : "All future purchases";
                                }
                            }
                            <small class="text-light">@superTitle</small>
                            <div class="text-light" style="font-weight:bold">@title</div>
                        </Loaded>
                    </Observable>
                </div>
            </Content>
        </ElixMenuButton>
    </div>
</div>
        <form class="col col-auto form-inline" style="padding-right:0px">
            <label for="textFilter"></label>
        </form>
        <div>
            <SyncButton Style="margin-left:5px" />
            <button class="btn btn-sm btn-secondary" @onclick="ShowTextFilter"><Icon Kind="IconKind.Search" />&nbsp;Add</button>
        </div>}
</nav>
<div class="col">
    @if (Items.Count > 0) {
        foreach (var cat in Items.Select(j => j.Category).Distinct().OrderBy(i => i.IsSome() ? i.Value.CategoryName.Item : "")) {
            var now = DateTimeOffset.Now;
            var categoryName = cat.IsNone() ? "(Uncategorized)" : cat.Value.CategoryName.Item;
            @if (cat.IsSome()) {
                <p @onclick="e=>OnNavigateToCategory(cat.Value.CategoryId)" class="categoryHeader">
                    @categoryName
                </p>
            }
            else {
                <p class="categoryHeader" style="cursor:inherit">
                    @categoryName
                </p>
            }

            foreach (var item in Items.Where(i => object.Equals(i.Category, cat)).OrderBy(j => j.Schedule.DueDate(now).GetOr(DateTimeOffset.MaxValue)).ThenBy(j => j.ItemName)) {
                <WebApp.Shared.Item HideCategory="true" OnClickPostpone="@(async i => await OnClickPostpone(i))" OnClickRemovePostpone="@(async i => await OnClickRemovePostpone(i))" OnClickBuyAgain="@(async i => await OnClickBuyAgain(i))" OnClickDelete="OnClickDelete" OnClickComplete="OnClickComplete" ItemQry="@item" />
            }
        }
    }
    else {
        if (TextFilter.Length > 0) {
            <p>Couldn't find anything like that, but it sounds tasty!</p>
        }
        else {
            <p>No shopping list items.</p>
        }
    }
</div>