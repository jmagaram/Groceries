@page "/shoppinglist"
@using Models
@using Common
@using Microsoft.FSharp.Core;
@using WebApp.Shared;
@using static Models.ScheduleModule.ScheduleExtensions;
@using static Models.ShoppingListSettingsModule

<style>
    .categoryHeader {
        margin-top: 1.0rem;
        margin-bottom: 0.4rem;
        cursor: pointer;
        max-width: 250px;
    }

    .filterRow {
        animation-duration: 0.2s;
        animation-name: slidein;
        animation-timing-function: ease-out;
        width: 30ch;
    }

    .filterInput {
        width: 20ch;
        font-size: larger;
    }

    @@keyframes slidein {
        from {
            margin-left: 60%;
            width: 1ch;
        }

        to {
            margin-left: 0%;
            width: 30ch;
        }
    }

    .jm-navbar {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        padding: 5px 10px 5px 10px;
        position: sticky;
        top: 0;
        z-index: 1;
    }

        .jm-navbar * {
            display: flex;
            flex-direction: row;
            align-items: center;
        }

        .jm-navbar:not(.search) #cancelSearch {
            display: none;
        }

        .jm-navbar.search > :first-child {
            display: none;
        }

    #searchColumn.search > :not(#searchElements) {
        display: none;
    }

    #searchTrigger {
        display: inline-grid;
    }

        #searchTrigger > #decoy {
            z-index: 99;
            justify-content: center;
            color: white;
        }

        #searchTrigger > #searchInput {
            z-index: 100;
            opacity: 0;
            width: 4em;
            border: none;
            border-radius: 3px;
            padding: 4px;
            cursor: pointer;
        }

        #searchTrigger.search > #decoy {
            display: none;
        }

        @{ var inputWidth = (StateService.CurrentState.GetGlobalSettings().LargerFontSize) ? "15em" : "17em"; }

#searchTrigger.search > #searchInput {
            opacity: 1;
                    width: @inputWidth;
            cursor: text;
        }

#searchTrigger > * {
                grid-column: 1;
            grid-row: 1;
        }

#searchColumn.search > #searchElements {
        animation: startSearch;
            animation-duration: 0.25s;
            animation-timing-function: ease;
    }

    @@keyframes startSearch {
        from {
            opacity: 0;
            margin-left: 12em;
        }

        to {
            opacity: 1;
            margin-left: 0px;
        }
    }

    ion-icon {
        font-size: 24px;
    }

</style>
@{
    string searchClass = ShowFilter ? "search" : "";
}
<div class="jm-navbar bg-dark @searchClass">
    <div>
        <a style="margin-right:0.5rem; color:white" href="\"><ion-icon name="chevron-back-outline"></ion-icon></a>
        <ElixMenuButton SourcePartType="div" OnMenuItemSelected="@OnMenuItemSelected">
            <Content>
                <elix-menu-item disabled><strong>Plan</strong></elix-menu-item>
                <elix-menu-item id="plan7">Upcoming week</elix-menu-item>
                <elix-menu-item id="plan14">Next 2 weeks</elix-menu-item>
                <elix-menu-item id="planfuture">Future</elix-menu-item>
                <elix-menu-separator></elix-menu-separator>
                <elix-menu-item disabled><strong>Shop</strong></elix-menu-item>
                <elix-menu-item id="shopall">All Stores</elix-menu-item>
                @foreach (var s in StoreFilterChoices) {
                    string id = $"s{Models.StoreIdModule.serialize(s.StoreId)}";
                    <elix-menu-item id="@id">@s.StoreName.Item</elix-menu-item>
                }
                <div slot="source" style="display:flex; flex-direction:column; align-items:flex-start">
                    @{
                        string superTitle = null;
                        string title = null;
                        if (Settings.HideCompletedItems) {
                            superTitle = "Shopping list";
                            title =
                                Settings.StoreFilter.IsSome()
                                ? StoreFilterChoices.FirstOrDefault(j => j.StoreId.Equals(Settings.StoreFilter.Value)).StoreName.Item
                                : "All Stores";
                        }
                        else {
                            superTitle = "Plan";
                            title =
                                (Settings.PostponedViewHorizon == 14) ? "Next 2 weeks"
                                : (Settings.PostponedViewHorizon == 7) ? "Upcoming week"
                                : "Future";
                        }
                    }
                    <small class="text-light">@superTitle</small>
                    <div class="text-light" style="font-weight:bold">@title</div>
                </div>
            </Content>
        </ElixMenuButton>
    </div>
    <div id="searchColumn" class="@searchClass">
        <SyncButton Style="padding:0px;margin-right:2em" />
        <div id="searchElements">
            <div id="searchTrigger" class="@searchClass">
                <div id="decoy"><ion-icon name="search-outline"></ion-icon><span style="margin-left:-5px"><ion-icon name="add-outline"></ion-icon></span></div>
                <input @onclick="_=>ShowFilter=true"
                       value="@ShoppingListView.TextFilter.ValueCommitted"
                       @oninput="e=>OnTextFilterInput((string)e.Value)"
                       @onkeydown="@(e => OnTextFilterKeyDown(e))"
                       @onblur="@(e=>OnTextFilterBlur())"
                       id="searchInput"
                       placeholder="Find or add"
                       autocomplete="off"
                       type="text" />
            </div>
            <button class="btn text-light" @onclick="_=>HideTextFilter()" id="cancelSearch">Done</button>
        </div>
    </div>
</div>
<div class="col">
    @foreach (var cat in Items.Select(j => j.Category).Distinct().OrderBy(i => i.IsSome() ? i.Value.CategoryName.Item : "")) {
        var now = DateTimeOffset.Now;
        var categoryName = cat.IsNone() ? "(Uncategorized)" : cat.Value.CategoryName.Item;
        @if (cat.IsSome()) {
            <p @onclick="e=>OnNavigateToCategory(cat.Value.CategoryId)" class="categoryHeader">
                @categoryName
            </p>
        }
        else {
            <p class="categoryHeader" style="cursor:inherit">
                @categoryName
            </p>
        }

        foreach (var item in Items.Where(i => object.Equals(i.Category, cat)).OrderBy(j => j.Schedule.DueDate(now).GetOr(DateTimeOffset.MaxValue)).ThenBy(j => j.ItemName)) {
            <WebApp.Shared.Item HideCategory="true" OnClickBuyAgainRepeat="OnClickBuyAgainRepeat" OnClickPostpone="@(async i => await OnClickPostpone(i))" OnClickRemovePostpone="@(async i => await OnClickRemovePostpone(i))" OnClickBuyAgain="@(async i => await OnClickBuyAgain(i))" OnClickDelete="OnClickDelete" OnClickComplete="OnClickComplete" ItemQry="@item" />
        }
    }
    @if (TextFilter.Length >= 1) {
        if (Items.Count == 0) {
            <p style="margin-top:1rem">Nothing found like that.</p>
            <button style="margin-top:0rem" class="btn btn-primary" @onclick="OnStartCreateNew">Create new item...</button>
        }
        else {
            <p style="margin-top:1rem; margin-bottom:0px; border-top:1px solid #acacac">&nbsp;</p>
            <button class="btn btn-primary" @onclick="OnStartCreateNew">Create new item...</button>
        }
    }
    else if (Items.Count == 0) {
        <p style="margin-top:1rem">No items on your shopping list.</p>
    }
</div>