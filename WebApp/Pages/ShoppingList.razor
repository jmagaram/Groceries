@page "/shoppinglist"
@using Models
@using Common
@using Microsoft.FSharp.Core;
@using WebApp.Shared;
@using static Models.CoreTypes;
@using static Models.ShoppingListSettingsModule;

@{
    string searchClass = IsSearchBarVisible ? "search" : "";
    Store currentStoreFilter = ShoppingListView.StoreFilter.AsEnumerable().SingleOrDefault();
    string currentStoreName = currentStoreFilter?.StoreName.AsText() ?? "All Stores";
}
<div class="@SearchBarClass bg-dark">
    <input @oninput="e => OnTextFilterInput((string)e.Value)"
           @onfocusin="async _=>await StartSearch()"
           @onkeydown="@(e => OnTextFilterKeyDown(e))"
           @onblur="@(e => OnTextFilterBlur())"
           value="@ShoppingListView.TextFilter.ValueCommitted"
           id="searchInput"
           type="text"
           placeholder="Search or add item"
           autocomplete="off"
           spellcheck="false" />
    <button class="btn text-light" @onclick="async _=>await EndSearch()" ontouchstart="">Cancel</button>
</div>
@if (!IsSearchBarVisible)
{
    <div class="regular-bar bg-dark @searchClass">
        <button class="titleButton" ontouchstart="" @onclick="async _=>await OpenStoreNavigator()">@currentStoreName</button>
        <div>
            <SyncButton Style=""/>
            <button type="button" ontouchstart="" @onclick="async _ => await _viewOptionsDrawer.Open(StateService.CurrentState.LoggedInUserSettings().FontSize)" class="btn text-light"><ion-icon name="eye-outline"></ion-icon></button>
        </div>
    </div>
}
<div class="col">
    @{
        var now = DateTimeOffset.Now;
        var hideStores = !IsSearchBarVisible && ShoppingListView.StoreFilter.IsSome();
        foreach (var categorySummary in ShoppingListView.Categories.Where(j => j.Total > 0))
        {
            var c = categorySummary;
            var catName = c.Category.IsNone() ? "Uncategorized" : c.Category.Value.CategoryName.Item;
            var catId = c.Category.AsEnumerable().Select(i => i.CategoryId).FirstOrDefault();
            <button ontouchstart="" @ref="_categoryReferences[catId]" @onclick="async e => await OnClickCategoryHeader()" class="categoryHeader">
                @catName
            </button>
            if (c.Total > 0)
            {
                var activeItems = c.Items.Where(j => j.Schedule.IsActive());
                var inactiveItems = c.Items.Where(j => !j.Schedule.IsActive()).ToArray();
                foreach (var itemUncaptured in activeItems)
                {
                    var item = itemUncaptured;
                    <div class="activeGroup">
                        <WebApp.Shared.Item HideStores="@hideStores" OnClickAddToShoppingList="async i => await OnClickAddToShoppingList(i)" OnClickDue="async i => await OnClickChoosePostpone(i)" OnClick="async i => await OnClickItem(item.ItemId)" ItemQry="@item" />
                    </div> }
                @if (inactiveItems.Length > 0)
                {
                    <div class="buyAgainGroup">
                        @foreach (var itemUncaptured in inactiveItems)
                        {
                            var item = itemUncaptured;
                            <WebApp.Shared.Item HideStores="@hideStores" OnClickAddToShoppingList="async i => await OnClickAddToShoppingList(i)" OnClickDue="async i => await OnClickChoosePostpone(i)" OnClick="async i => await OnClickItem(item.ItemId)" ItemQry="@item" />
                        }
                    </div>
                }
            }
            else
            {
                <p style="margin-left:20px; font-size:smaller" class="text-muted">None</p>
            }
        }
    }
    @if (TextFilter.Length >= 1)
    {
        if (ShoppingListView.TotalItems == 0)
        {
            <p style="margin-top:1rem">Nothing found like that.</p>
            <button style="margin-top:0rem" class="btn btn-primary" @onclick="OnStartCreateNew">Create new item...</button>
        }
        else
        {
            <p style="margin-top:1rem; margin-bottom:0px; border-top:1px solid #acacac">&nbsp;</p>
            <button class="btn btn-primary" @onclick="OnStartCreateNew">Create new item...</button>
        }
    }
    else if (ShoppingListView.TotalItems == 0)
    {
        <p style="margin-top:1rem">No items on your shopping list.</p>
    }
</div>
@if (!IsSearchBarVisible)
{
    <label ontouchstart="" class="fab" for="searchInput">
        <ion-icon name="add-outline"></ion-icon>
    </label>
}
<ItemQuickActionDrawer OnDelete="async i => await OnClickDelete(i)"
                       OnAddToShoppingListNow="async i=> await OnClickRemovePostpone(i)"
                       OnBuyAgain="async i=>await OnClickChooseFrequency(i)"
                       OnComplete="async i=> await OnClickComplete(i)"
                       OnEdit="async i => await OnEditItem(i)"
                       OnPostpone="async i=> await OnClickChoosePostpone(i)"
                       OnPostponeDays="async i=>await OnClickPostponeDays(i)"
                       @ref="_itemQuickActionDrawer"></ItemQuickActionDrawer>
<PostponeDrawer OnSelected="async d => await OnPostponeDurationChosen(d)" @ref="_postponeDrawer"></PostponeDrawer>
<FrequencyDrawer OnSelected="async r => await OnFrequencyChosen(r)" @ref="_frequencyDrawer"></FrequencyDrawer>
<CategoryNavigatorDrawer OnSelect="async id => await OnNavigateToCategory(id)" OnManageCategories="OnManageCategories" @ref="_categoryNavigationDrawer"></CategoryNavigatorDrawer>
<StoreNavigatorDrawer OnSelect="async id => await OnChooseStore(id)" OnManageStores="_ => OnManageStores()" @ref="_storesNavigatorDrawer"></StoreNavigatorDrawer>
<ViewOptionsDrawer ChooseFontSize="async s => await UseFontSize(s)" OnHideUpcoming="async _ => await SwitchToShoppingMode()" OnSelectUpcomingDays="async d=>await SwitchToPlanningMode(d)" @ref="_viewOptionsDrawer"></ViewOptionsDrawer>
