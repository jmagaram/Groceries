@page "/shoppinglist"
@using Models
@using Common
@using Microsoft.FSharp.Core;

<div class="row justify-content-between align-items-center sticky-top" style="padding-bottom:7px; margin-left:0; margin-right:0; border-bottom:solid 1px #d3d3d3">
    @if(TextFilter.Length==0) {
    <div class="col nav col-auto">
        @{
            var currentStoreName = StoreFilterChoices.FirstOrDefault(i => i.StoreId.Item == StoreFilter)?.StoreName.Item ?? "All Stores";
        }
        <div class="nav-item">
            <button class="btn btn-sm btn-primary dropdown-toggle nav-item" style="font-weight:bold" type="button" id="storeDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @currentStoreName
            </button>
            <div class="dropdown-menu nav-item" aria-labelledby="storeDropdown">
                <button class="dropdown-item btn-sm" @onclick="e=>OnStoreFilterClear()">All Stores</button>
                <div class="dropdown-divider"></div>
                @foreach (var s in StoreFilterChoices) {
                    string description = s.StoreName.Item;
                <button class="dropdown-item btn-small" href="#" @onclick="e=>OnStoreFilter(s.StoreId)">@description</button>
                }
                <div class="dropdown-divider"></div>
                <a class="dropdown-item btn-small" href="editstore">New store...</a>
                @if (StoreFilter != Guid.Empty) {
                <a class="dropdown-item" href="editstore/@StoreFilter">Edit @currentStoreName...</a>
                }
            </div>
        </div>
        <div class="nav-item">
            <button class="btn btn-sm btn-outline-dark dropdown-toggle nav-item" style="margin-left:5px" type="button" id="viewDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                View
            </button>
            <div class="dropdown-menu nav-item" aria-labelledby="viewDropdown">
                <h6 class="dropdown-header">POSTPONED ITEMS</h6>
                <button @onclick="_=>ShowPostponedWithinNext(0)" class="dropdown-item">Overdue only</button>
                <button @onclick="_=>ShowPostponedWithinNext(3)" class="dropdown-item">Next few days</button>
                <button @onclick="_=>ShowPostponedWithinNext(7)" class="dropdown-item">+1 week</button>
                <button @onclick="_=>ShowPostponedWithinNext(14)" class="dropdown-item">+2 weeks</button>
                <button @onclick="_=>ShowPostponedWithinNext(int.MaxValue)" class="dropdown-item">All</button>
                <div class="dropdown-divider"></div>
                <h6 class="dropdown-header">COMPLETED ITEMS</h6>
                <button @onclick="_=>OnClickShowCompletedItems()" class="dropdown-item">Show completed</button>
                <button @onclick="_=>OnClickHideCompletedItems()" class="dropdown-item">Hide completed</button>
            </div>
        </div>
    </div>
    }
    else {
    <div class="col nav col-auto">
        &nbsp;
    </div>
    }
    <form class="col col-auto form-inline" style="padding-right:0px">
        <label for="textFilter"></label>
        @{
            var width = (TextFilter.Length>0) ? "120px" : "60px";
        }
        <input autocomplete="off" type="text" id="textFilter" class="form-control form-control-sm" style="max-width:@width" value="@TextFilter" placeholder="Find" @oninput="OnTextFilterChange" @onkeydown="OnTextFilterKeyDown" @onfocusout="OnTextFilterBlur" />
        @if (TextFilter.Length > 0) {
        <button type="button" class="btn btn-link btn-sm" style="margin-left:1px" @onclick="OnTextFilterClear"><span class="oi oi-x" aria-hidden="true"></span></button>
        }
        <a style="margin-left:8px" class="btn btn-sm btn-outline-dark" href="itemnew/@TextFilter">Add</a>
    </form>
</div>
@if (Items.Count > 0) {
    foreach (var cat in Items.Select(j => j.Category).Distinct().OrderBy(i => i)) {
        var now = DateTimeOffset.Now;
        var categoryName = cat.IsNone() ? "(Uncategorized)" : cat.Value.CategoryName.Item;
<div>
    @if (cat.IsSome()) {
    <strong @onclick="e=>OnNavigateToCategory(cat.Value.CategoryId)" style="display:inline-block; cursor:pointer">
        @categoryName
    </strong>
            }
            else {
    <strong style="display:inline-block">
        @categoryName
    </strong>
            }
</div>

        foreach (var item in Items.Where(i => object.Equals(i.Category, cat)).OrderBy(j => ScheduleModule.due(now, j.Schedule)).ThenBy(j => j.ItemName)) {
<WebApp.Shared.Item HideCategory="true" OnClickPostpone="OnClickPostpone" OnClickRemovePostpone="OnClickRemovePostpone" OnClickBuyAgain="OnClickBuyAgain" OnClickDelete="OnClickDelete" OnClickComplete="OnClickComplete" ItemQry="@item" />
        }
    }
}
else {
    if (TextFilter.Length > 0) {
<p>Couldn't find anything like that, but it sounds tasty!</p>
    }
    else {
<p>No shopping list items.</p>
    }
}
