@page "/find"
@using Client.Data
@inject ApplicationStateService ApplicationState

<style>
    span.highlightedItem {
        background-color: yellow;
        border-width: 0px;
        padding: 0px;
    }

    span.standardItem {
        border-width: 0px;
        padding: 0px;
    }
</style>
<h1>Find</h1>

<input value="@viewModel.TextFilterBox.Text" @oninput="@(e => UpdateFilter((string)e.Value))" />
<br />
@{
    void RenderSpans(IEnumerable<FindView.Span> spans)
    {
        foreach (var s in spans)
        {
            if (s.Format.IsHighlight)
            {<span class="highlightedItem">@s.Text</span>}
            else
            {<span class="standardItem">@s.Text</span>}
        }
    }
    @if (viewModel.Items.Any())
    {
        foreach (var i in viewModel.Items)
        {
            <p>
                @{ RenderSpans(i.Title); }
            </p>
        }
    }
    else
    {
        <p>Nothing found!</p>
    }
    @code {
        private FindView.View viewModel;

        protected void UpdateFilter(string filter)
        {
            var viewMessage = FindView.ViewMessage.NewChangeTextFilter(DomainTypes.TextBoxMessage.NewSetText(filter));
            var items = ApplicationState.State.Items.Select(i => i.Value);
            viewModel = FindView.ViewModule.update(viewMessage, items, viewModel);
        }

        protected override void OnInitialized()
        {
            base.OnInitialized();
            viewModel = FindView.ViewModule.create;
        }
    }
}