@using static DomainTypes
@using Microsoft.FSharp.Core
<h3>ItemEdit Component</h3>
<form>
    <div>
        <label>
            Name: <input @oninput="_title.OnTextChange" @onfocusout="_title.OnFocusOut" @onfocusin="_title.OnFocusIn" placeholder="Apples, Canned Tuna, ..." value="@Model.Title.Text" />
            @if (Model.Title.Error.IsSome())
            {
                <span>Error: @Model.Title.Error.Value</span>
            }
        </label>
    </div>
    <div>
        <label>
            Quantity: <input @oninput="_quantity.OnTextChange" @onfocusout="_quantity.OnFocusOut" @onfocusin="_quantity.OnFocusIn" placeholder="1 jar, 3 lb, lots!" value="@Model.Quantity.Text" />
            @if (Model.Quantity.Error.IsSome())
            {
                <span>Error: @Model.Quantity.Error.Value</span>
            }
            <button disabled="@(!Model.QuantitySpinner.CanDecrease)" type="button" @onclick="DecreaseQuantity">-</button>
            <button disabled="@(!Model.QuantitySpinner.CanIncrease)" type="button" @onclick="IncreaseQuantity">+</button>
        </label>
    </div>
    <div>
        <label>
            Note: <textarea rows="3" @oninput="_note.OnTextChange" @onfocusout="_note.OnFocusOut" @onfocusin="_note.OnFocusIn" placeholder="Favorite brand, organic-only, not too ripe, .." value="@Model.Note.Text" />
            @if (Model.Note.Error.IsSome())
            {
                <span>Error: @Model.Note.Error.Value</span>
            }
        </label>
    </div>
    <div>
        <label>
            Repeat:
            <select @onchange="OnRepeatChange">
                @foreach (var i in Model.Repeat.Choices.OrderBy(global::Repeat.orderBy))
                {
                    string key = global::Repeat.serialize(i);
                    string selectedKey = global::Repeat.serialize(Model.Repeat.SelectedItem);
                    bool isSelected = key == selectedKey;
                    string description = RepeatAsText(i);
                    <option selected="@isSelected" value="@key">@description</option>
                }
            </select>
        </label>
    </div>
    <div>
        <label>
            Status:
            <select @onchange="OnStatusChange">
                @foreach (var i in Model.Status.Choices.OrderBy(global::RelativeStatus.orderBy))
                {
                    string key = global::RelativeStatus.serialize(i);
                    string selectedKey = global::RelativeStatus.serialize(Model.Status.SelectedItem);
                    bool isSelected = key == selectedKey;
                    string description = RelativeStatusAsText(i);
                    <option selected="@isSelected" value="@key">@description</option>
                }
            </select>
        </label>
    </div>
</form>

