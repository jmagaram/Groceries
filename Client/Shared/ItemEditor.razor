@using static DomainTypes
@using Microsoft.FSharp.Core

<h3>ItemEdit Component</h3>

<form>
    <div>
        <label>
            Name: <input @oninput="_title.OnTextChange" @onfocusout="_title.OnFocusOut" @onfocusin="_title.OnFocusIn" placeholder="Apples, Canned Tuna, ..." value="@Model.Title.Text" />
            @if (Model.Title.Error.IsSome())
            {
                <span>Error: @Model.Title.Error.Value</span>
            }
        </label>
    </div>
    <div>
        <label>
            Quantity: <input @oninput="_quantity.OnTextChange" @onfocusout="_quantity.OnFocusOut" @onfocusin="_quantity.OnFocusIn" placeholder="1 jar, 3 lb, lots!" value="@Model.Quantity.Text" />
            @if (Model.Quantity.Error.IsSome())
            {
                <span>Error: @Model.Quantity.Error.Value</span>
            }
            <button disabled="@(!Model.QuantitySpinner.CanDecrease)" type="button" @onclick="DecreaseQuantity">-</button>
            <button disabled="@(!Model.QuantitySpinner.CanIncrease)" type="button" @onclick="IncreaseQuantity">+</button>
        </label>
    </div>
    <div>
        <label>
            Note: <textarea rows="3" @oninput="_note.OnTextChange" @onfocusout="_note.OnFocusOut" @onfocusin="_note.OnFocusIn" placeholder="Favorite brand, organic-only, not too ripe, .." value="@Model.Note.Text" />
            @if (Model.Note.Error.IsSome())
            {
                <span>Error: @Model.Note.Error.Value</span>
            }
        </label>
    </div>
    <div>
        <label>
            Repeat:
            <select @onchange="OnRepeatChange">
                @foreach (var i in Model.Repeat.Choices.OrderBy(global::Repeat.orderBy))
                {
                    string key = global::Repeat.serialize(i);
                    string selectedKey = global::Repeat.serialize(Model.Repeat.SelectedItem);
                    bool isSelected = key == selectedKey;
                    string description = RepeatAsText(i);
                    <option selected="@isSelected" value="@key">@description</option>
                }
            </select>
        </label>
    </div>
</form>

@code {
    [Parameter]
    public DomainTypes.ItemEditorModel Model { get; set; }

    protected TextBoxHandler<ItemEditorModel, ItemEditorMessage> _title;
    protected TextBoxHandler<ItemEditorModel, ItemEditorMessage> _quantity;
    protected TextBoxHandler<ItemEditorModel, ItemEditorMessage> _note;

    protected class TextBoxHandler<TModel, TMessage>
    {
        Func<TModel> _getModel;
        Action<TModel> _setModel;
        Func<TextBoxMessage, TMessage> _msg;
        Func<TMessage, TModel, TModel> _update;

        public TextBoxHandler(Func<TModel> getModel, Action<TModel> setModel, Func<TextBoxMessage, TMessage> msg, Func<TMessage, TModel, TModel> update)
        {
            _getModel = getModel;
            _setModel = setModel;
            _msg = msg;
            _update = update;
        }

        public void OnTextChange(ChangeEventArgs e) => ProcessMessage(global::DomainTypes.TextBoxMessage.NewSetText(e.Value.ToString()));

        public void OnFocusIn(FocusEventArgs e) => ProcessMessage(global::DomainTypes.TextBoxMessage.GetFocus);

        public void OnFocusOut(FocusEventArgs e) => ProcessMessage(global::DomainTypes.TextBoxMessage.LoseFocus);

        protected void ProcessMessage(TextBoxMessage msg)
        {
            var modelMessage = _msg(msg);
            var model = _getModel();
            var updatedModel = _update(modelMessage, model);
            _setModel(updatedModel);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        TextBoxHandler<ItemEditorModel, ItemEditorMessage> createHandler(Func<TextBoxMessage, ItemEditorMessage> msg) =>
            new TextBoxHandler<ItemEditorModel, ItemEditorMessage>(
                () => Model,
                m => Model = m,
                msg,
                global::ItemEditorModel.update);

        _title = createHandler(global::DomainTypes.ItemEditorMessage.NewTitleMessage);
        _note = createHandler(global::DomainTypes.ItemEditorMessage.NewNoteMessage);
        _quantity = createHandler(global::DomainTypes.ItemEditorMessage.NewQuantityMessage);
    }

    protected void OnRepeatChange(ChangeEventArgs e)
    {
        var selectedKey = (string)(e.Value);
        var selected = global::Repeat.deserialize(selectedKey).ResultValue;
        var msg = DomainTypes.ItemEditorMessage.NewRepeatMessage(selected);
        Model = global::ItemEditorModel.update(msg, Model);
    }

    protected string RepeatAsText(Repeat r) => global::Repeat.formatEnglish.Invoke(r);

    protected void IncreaseQuantity() =>
        Model = global::ItemEditorModel.update(ItemEditorMessage.NewQuantitySpinner(SpinnerMessage.Increase), Model);

    protected void DecreaseQuantity() =>
        Model = global::ItemEditorModel.update(ItemEditorMessage.NewQuantitySpinner(SpinnerMessage.Decrease), Model);
}

