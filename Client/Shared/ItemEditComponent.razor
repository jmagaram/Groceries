@inject Client.Data.ApplicationStateService StateService
@implements IDisposable
@using System.Reactive.Linq

<h3>Item Edit</h3>

<form>
    <div>
        <label>
            Name: <input @oninput="OnTitleChange" @onfocusout="OnTitleFocusOut" @onfocusin="OnTitleFocusIn" placeholder="Apples, Canned Tuna, ..." value="@_view.Title.Text" />
            @if (_view.Title.Error.IsSome())
            {
                <span>Error: @_view.Title.Error.Value</span>
            }
        </label>
    </div>
    <div>
        <label>
            Quantity: <input @oninput="OnQuantityChange" @onfocusout="OnQuantityFocusOut" @onfocusin="OnQuantityFocusIn" placeholder="1 jar, 3 lb, lots!" value="@_view.Quantity.Text" />
            @if (_view.Quantity.Error.IsSome())
            {
                <span>Error: @_view.Quantity.Error.Value</span>
            }
            <button disabled="@(!_view.QuantitySpinner.CanDecrease)" type="button" @onclick="QuantityDecrease">-</button>
            <button disabled="@(!_view.QuantitySpinner.CanIncrease)" type="button" @onclick="QuantityIncrease">+</button>
        </label>
    </div>
    <div>
        <label>
            Note: <textarea rows="3" @oninput="OnNoteChange" @onfocusout="OnNoteFocusOut" @onfocusin="OnNoteFocusIn" placeholder="Favorite brand, organic-only, not too ripe, .." value="@_view.Note.Text" />
            @if (_view.Note.Error.IsSome())
            {
                <span>Error: @_view.Note.Error.Value</span>
            }
        </label>
    </div>
    <div>
        <label>
            Repeat:
            <select @onchange="OnRepeatChange" @onfocusin="OnRepeatFocusIn" @onfocusout="OnRepeatFocusOut">
                @foreach (var i in global::ChooseOne.items(_view.Repeat))
                {
                    string description = RepeatAsText(i.Value);
                    <option selected="@i.IsSelected" value="@i.Key">@description</option>
                }
            </select>
        </label>
    </div>
    <div>
        <label>
            RelativeStatus:
            <select @onchange="OnRelativeStatusChange" @onfocusin="OnRelativeStatusFocusIn" @onfocusout="OnRelativeStatusFocusOut">
                @foreach (var i in global::ChooseOne.items(_view.RelativeStatus))
                {
                    string description = RelativeStatusAsText(i.Value);
                    <option selected="@i.IsSelected" value="@i.Key">@description</option>
                }
            </select>
        </label>
    </div>
    <button type="button" @onclick="e=>OnSubmit.InvokeAsync(null)" disabled="@(!_view.Commands.Contains(DomainTypes.ItemEditCommand.Submit))">Save</button>
    <button type="button" @onclick="e=>OnDelete.InvokeAsync(null)" disabled="@(!_view.Commands.Contains(DomainTypes.ItemEditCommand.Delete))">Delete</button>
    <button type="button" @onclick="e=>OnCancel.InvokeAsync(null)" disabled="@(!_view.Commands.Contains(DomainTypes.ItemEditCommand.Cancel))">Cancel</button>

</form>

@code {

    private IDisposable _subscription = null;
    public DomainTypes.ItemEditView _view = null;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _subscription =
            ItemEditView
            .fromObservable(StateService.StateObservable.Select(i => i.EditModel))
            .Subscribe(OnNextView);
    }

    protected void OnTitleChange(ChangeEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewTitleMessage(DomainTypes.FormFieldMessage<string>.NewPropose((string)e.Value))));

    public void OnTitleFocusIn(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewTitleMessage(DomainTypes.FormFieldMessage<string>.GainedFocus)));

    public void OnTitleFocusOut(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewTitleMessage(DomainTypes.FormFieldMessage<string>.LostFocus)));

    protected void OnNoteChange(ChangeEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewNoteMessage(DomainTypes.FormFieldMessage<string>.NewPropose((string)e.Value))));

    public void OnNoteFocusIn(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewNoteMessage(DomainTypes.FormFieldMessage<string>.GainedFocus)));

    public void OnNoteFocusOut(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewNoteMessage(DomainTypes.FormFieldMessage<string>.LostFocus)));

    protected void OnQuantityChange(ChangeEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewQuantityMessage(DomainTypes.FormFieldMessage<string>.NewPropose((string)e.Value))));

    public void OnQuantityFocusIn(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewQuantityMessage(DomainTypes.FormFieldMessage<string>.GainedFocus)));

    public void OnQuantityFocusOut(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewQuantityMessage(DomainTypes.FormFieldMessage<string>.LostFocus)));

    protected void OnRepeatChange(ChangeEventArgs e) {
        string selected = (string)(e.Value);
        var selectedRepeat = _view.Repeat.Deserialize.Invoke(selected);
        StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewRepeatMessage(DomainTypes.FormFieldMessage<DomainTypes.Repeat>.NewPropose(selectedRepeat))));
    }

    public void OnRepeatFocusIn(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewRepeatMessage(DomainTypes.FormFieldMessage<DomainTypes.Repeat>.GainedFocus)));

    public void OnRepeatFocusOut(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewRepeatMessage(DomainTypes.FormFieldMessage<DomainTypes.Repeat>.LostFocus)));

    protected void OnRelativeStatusChange(ChangeEventArgs e)
    {
        string selected = (string)(e.Value);
        var selectedRelativeStatus = _view.RelativeStatus.Deserialize.Invoke(selected);
        StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewSetRelativeStatus(DomainTypes.FormFieldMessage<DomainTypes.RelativeStatus>.NewPropose(selectedRelativeStatus))));
    }

    public void OnRelativeStatusFocusIn(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewSetRelativeStatus(DomainTypes.FormFieldMessage<DomainTypes.RelativeStatus>.GainedFocus)));

    public void OnRelativeStatusFocusOut(FocusEventArgs e) => StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewSetRelativeStatus(DomainTypes.FormFieldMessage<DomainTypes.RelativeStatus>.LostFocus)));

    protected void QuantityDecrease() =>
StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewInvokeCommand(DomainTypes.ItemEditCommand.QuantityDecrease)));

    protected void QuantityIncrease()=>
        StateService.Update(DomainTypes.StateMessage.NewItemEditMessage(DomainTypes.ItemEditMessage.NewInvokeCommand(DomainTypes.ItemEditCommand.QuantityIncrease)));

    protected string RepeatAsText(DomainTypes.Repeat r) => global::Repeat.formatEnglish.Invoke(r);

    protected string RelativeStatusAsText(DomainTypes.RelativeStatus r)
    {
        if (r.IsComplete)
            return "Complete";
        else if (r.IsActive)
            return "Active";
        else
        {
            (int, string) units(int days) =>
                (days % 30 == 0)
                ? (days / 30, days == 30 ? "month" : "months")
                : (days % 7 == 0)
                ? (days / 7, days == 7 ? "week" : "weeks")
                : (days, days == 1 ? "day" : "days");
            var d = (r as DomainTypes.RelativeStatus.PostponedDays).Item;
            var (count, unitType) = units(d);
            if (d == 1)
                return $"Postponed until tomorrow";
            else if (d == 0)
                return $"Due today";
            else if (d > 0)
                return $"Postponed for {count} {unitType}";
            else
                return $"Overdue {-count} {unitType}";
        }
    }

    void OnNextView(DomainTypes.ItemEditView view)
    {
        _view = view;
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }
}
